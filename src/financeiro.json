[{"id":"d6cf8585.8b4a18","type":"http in","z":"8364cdd3.e51ef","name":"busca","url":"/api/financeiro/duplicata/emissao/busca","method":"get","swaggerDoc":"","x":110,"y":320,"wires":[["17ce5051.4accc"]]},{"id":"17ce5051.4accc","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var sql = \n    \"DECLARE @PEDIDO INT\\n\" +\n    \"DECLARE @CNPJ NVARCHAR(14)\\n\" +\n    \"DECLARE @NOME NVARCHAR(100)\\n\" +\n    \"SET @PEDIDO = \" + (msg.req.query.pedido) + \"\\n\" +\n    \"SET @CNPJ = \" + (\"'\" + msg.req.query.cnpj + \"'\") + \"\\n\" +\n    \"SET @NOME = \" + (\"'\" + msg.req.query.nome + \"'\") + \"\\n\" +\n    \"SELECT top 10 \" +\n    \"\tLTRIM(RTRIM(LPV.LPEMP)) AS empresa, \\n\" +\n    \"\tCAST(LPV.LPPED AS INT) AS pedido, \\n\" +\n    \"\tCAST(LPV.LPENT AS DATE) AS emissao, \\n\" +\n    \"\tLPV.Lp0SaiRed AS entrega, \\n\" +\n    \"\tLTRIM(RTRIM(CACLI.CCCGC)) AS cnpj, \\n\" +\n    \"\tLTRIM(RTRIM(CACLI.CCFAN)) AS fantasia, \\n\" +\n    \"\tLTRIM(RTRIM(CACLI.CCNOM)) AS nome \\n\" +\n    \"FROM \\n\" +\n    \"\tGPIMAC_Altamira.dbo.LPV AS LPV INNER JOIN \\n\" +\n    \"   GPIMAC_Altamira.dbo.CACLI ON LPV.CCCGC = GPIMAC_Altamira.dbo.CACLI.CCCGC \\n\" +\n    \"WHERE \\n\" +\n    \"   (@PEDIDO IS NULL OR LPV.LPPED LIKE '%' + CAST(@PEDIDO AS NVARCHAR(10)) + '%') AND \\n\" +\n    \"   (@CNPJ IS NULL OR CACLI.CCCGC LIKE '%' + @CNPJ + '%') AND \\n\" +\n    \"   (@NOME IS NULL OR CACLI.CCFAN LIKE '%' + @NOME + '%') AND \\n\" +\n    \"   (@NOME IS NULL OR CACLI.CCNOM LIKE '%' + @NOME + '%') \\n\" +\n    \"ORDER BY \\n\" +\n    \"   LPV.LPPED DESC\"\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    msg.payload = recordset;\n    console.dir(recordset);\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});","outputs":1,"noerr":0,"x":370,"y":320,"wires":[["fefa66f.52edb98"]]},{"id":"fefa66f.52edb98","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":320,"wires":[]},{"id":"fa5c8fbd.ab40d","type":"http in","z":"8364cdd3.e51ef","name":"lancamento","url":"/api/financeiro/recebiveis/lancamento/","method":"post","swaggerDoc":"","x":130,"y":780,"wires":[["268bfb97.6b9314"]]},{"id":"268bfb97.6b9314","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'LANCAMENTO_CONTAS_RECEBER'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\n// ---------------------- Remessa ----------------------\nrequest.input('NOSSO_NUMERO', mssql.Int, msg.payload.documento.nosso_numero)\n\n// ---------------------- Pedido ---------------------- //\nrequest.input('PEDIDO', mssql.Int, parseInt(msg.payload.documento.numero))\nrequest.input('EMISSAO', mssql.DateTime2, msg.payload.documento.emissao)\nrequest.input('ENTREGA', mssql.DateTime2, msg.payload.documento.entrega)\nrequest.input('CONDICAO', mssql.VarChar(3), msg.payload.documento.condicao)\n\n// ---------------------- Cliente ---------------------- //\nrequest.input('CONTA_CONTABIL', mssql.VarChar(20), msg.payload.documento.cliente.conta_contabil)\nrequest.input('CNPJ', mssql.VarChar(20), msg.payload.documento.cliente.cnpj)\nrequest.input('INSCRICAO', mssql.VarChar(12), msg.payload.documento.cliente.inscricao)\nrequest.input('FANTASIA', mssql.VarChar(30), msg.payload.documento.cliente.fantasia)\nrequest.input('NOME', mssql.VarChar(100), msg.payload.documento.cliente.nome)\nrequest.input('LOGRADOURO', mssql.VarChar(5), msg.payload.documento.cliente.logradouro)\nrequest.input('ENDERECO', mssql.VarChar(50), msg.payload.documento.cliente.endereco)\nrequest.input('NUMERO', mssql.VarChar(10), msg.payload.documento.cliente.numero)\nrequest.input('COMPLEMENTO', mssql.VarChar(20), msg.payload.documento.cliente.complemento)\nrequest.input('BAIRRO', mssql.VarChar(30), msg.payload.documento.cliente.bairro)\nrequest.input('MUNICIPIO', mssql.Int, parseInt(msg.payload.documento.cliente.municipio))\nrequest.input('CIDADE', mssql.VarChar(20), msg.payload.documento.cliente.cidade)\nrequest.input('CEP', mssql.VarChar(9), msg.payload.documento.cliente.CEP)\nrequest.input('UF', mssql.VarChar(2), msg.payload.documento.cliente.UF)\nrequest.input('DDD', mssql.VarChar(3), msg.payload.documento.cliente.ddd)\nrequest.input('TELEFONE', mssql.VarChar(15), msg.payload.documento.cliente.telefone)\nrequest.input('CONTATO', mssql.VarChar(20), msg.payload.documento.cliente.contato)\n\n// ---------------------- Representante ---------------------- //\nrequest.input('REPRESENTANTE_CODIGO', mssql.Char(3), msg.payload.documento.representante.codigo)\nrequest.input('REPRESENTANTE_NOME', mssql.VarChar(50), msg.payload.documento.representante.nome)\nrequest.input('REPRESENTANTE_COMISSAO', mssql.Decimal(18,2), msg.payload.documento.representante.comissao)\n\n// ---------------------- Parcelas ---------------------- //\nvar parcelas = new mssql.Table()\n\nparcelas.columns.add('nosso_numero', mssql.Int);\nparcelas.columns.add('parcela', mssql.Int);\nparcelas.columns.add('forma_pagto', mssql.VarChar(10));\nparcelas.columns.add('tipo_vencto', mssql.VarChar(3));\nparcelas.columns.add('vencto', mssql.Date);\nparcelas.columns.add('prazo', mssql.Int);\nparcelas.columns.add('valor_produtos', mssql.Money);\nparcelas.columns.add('valor_ipi', mssql.Money);\nparcelas.columns.add('valor', mssql.Money);\nparcelas.columns.add('origem', mssql.VarChar(10));\n\nmsg.payload.documento.parcelas.forEach( parcela => {\n    \n    let vencto = new Date(parcela.vencto);\n\n    parcelas.rows.add(\n        msg.payload.documento.nosso_numero,\n        parcela.parcela,\n        parcela.forma_pagto,\n        parcela.tipo_vencto,\n        vencto,\n        parcela.prazo,\n        parcela.valor_produtos,\n        parcela.valor_ipi,\n        parcela.valor,\n        parcela.origem\n    )\n    \n});\n\nrequest.input('PARCELAS', parcelas)\n\n// ---------------------- TAREFAS ---------------------- //\nvar tarefas = new mssql.Table()\n\ntarefas.columns.add('id', mssql.Int);\ntarefas.columns.add('nome', mssql.NVarChar(100));\ntarefas.columns.add('titulo', mssql.NVarChar(50));\ntarefas.columns.add('descricao', mssql.NVarChar(50));\ntarefas.columns.add('detalhes', mssql.NVarChar(100));\ntarefas.columns.add('documento', mssql.NVarChar(mssql.MAX));\ntarefas.columns.add('atribuir', mssql.NVarChar(50));\ntarefas.columns.add('atribuido', mssql.NVarChar(50));\ntarefas.columns.add('form', mssql.NVarChar(100));\ntarefas.columns.add('parametros', mssql.NVarChar(mssql.MAX));\ntarefas.columns.add('prazo', mssql.DateTime2(7));\ntarefas.columns.add('criado', mssql.DateTime2(7));\ntarefas.columns.add('concluido', mssql.DateTime2(7));\ntarefas.columns.add('versao', mssql.Int);\ntarefas.columns.add('operacao', mssql.VarChar(10));\n\ntarefas.rows.add(\n    parseInt(msg.payload.id),\n    msg.payload.nome,\n    msg.payload.titulo,\n    msg.payload.descricao,\n    msg.payload.detalhes,\n    JSON.stringify(msg.payload.documento), \n    msg.payload.atribuir,\n    msg.payload.atribuido,\n    msg.payload.form,\n    msg.payload.parametros,\n    msg.payload.prazo,\n    msg.payload.criado,\n    msg.payload.concluido,\n    parseInt(msg.payload.versao),\n    'CONCLUIR'\n);\n\nif (msg.payload.documento.parcelas.find( p => p.forma_pagto === 'COBRANCA')) {\n\n    var tarefa = \n    {\n        id: 0,\n        nome: 'Cobrança Bancária',\n        titulo: msg.payload.documento.cliente.fantasia,\n        descricao: 'Total R$ ' + msg.payload.documento.parcelas.reduce( (total, parcela) => total + parcela.valor, 0).toFixed(2).replace('.', ','),\n        detalhes: '',\n        documento: JSON.stringify(\n            {\n                tipo: 'cobranca',\n                nosso_numero: msg.payload.documento.nosso_numero,\n                pedido: msg.payload.documento.pedido,\n                cliente: msg.payload.documento.cliente,\n                parcelas: msg.payload.documento.parcelas.filter( p => p.forma_pagto === 'COBRANCA')\n            }),\n        atribuir: 'financeiro',\n        atribuido: null,\n        form: '/recebiveis/cobranca/',\n        parametros: null,\n        prazo: null,\n        criado: new Date(),\n        concluido: null,\n        versao: 0,\n        operacao: 'PROXIMA'\n    }    \n    \n    tarefas.rows.add(\n        0,\n        tarefa.nome,\n        tarefa.titulo,\n        tarefa.descricao,\n        tarefa.detalhes,\n        tarefa.documento, \n        tarefa.atribuir,\n        tarefa.atribuido,\n        tarefa.form,\n        tarefa.parametros,\n        tarefa.prazo,\n        tarefa.criado,\n        tarefa.concluido,\n        tarefa.versao,\n        tarefa.operacao\n    );\n    \n}\n\nrequest.input('TAREFAS', tarefas)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets || [{ erro: 9997, mensagem: 'A procedure foi executada mas não retornou resposta para esta solicitação !'}];\n    console.dir(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure' + procedure_name + ' <-----------------\\n' + JSON.stringify(err))\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n\n","outputs":"1","noerr":0,"x":370,"y":780,"wires":[["4d432ad9.ca7604"]]},{"id":"9e7c447.631dbb8","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"\nvar sql = `\n    SELECT * FROM CRT\n`\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    msg.payload = recordset;\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});\n","outputs":1,"noerr":0,"x":370,"y":440,"wires":[["ebf541d1.78413"]]},{"id":"4d432ad9.ca7604","type":"function","z":"8364cdd3.e51ef","name":"NOTIFY","func":"if (Array.isArray(msg.payload) && msg.payload.length > 0) {\n    \n    if (Array.isArray(msg.payload[0]) && msg.payload[0].length > 0 && msg.payload[0][0].erro === 0) {\n        return [\n            {req: msg.req, res: msg.res, payload: msg.payload[0][0]}, // mensagens de retorno\n            {payload: msg.payload[1]}, // notificações\n            null\n        ];\n    } else {\n        return [\n            {req: msg.req, res: msg.res, payload: msg.payload[0][0]}, // mensagens de retorno\n            null, // notificações\n            null\n        ];\n    }\n    \n} else {\n    return [\n        msg, \n        null, \n        null\n    ];\n}\n","outputs":"2","noerr":0,"x":600,"y":840,"wires":[["3fc7d67f.aff46a","2d5450aa.3824b"],["ad3f152e.9dc208"]]},{"id":"425f2801.c62d98","type":"mqtt out","z":"8364cdd3.e51ef","name":"","topic":"","qos":"","retain":"","broker":"b71ea51.d75e258","x":1110,"y":820,"wires":[]},{"id":"2a4cadb.de4f752","type":"http in","z":"8364cdd3.e51ef","name":"nosso_numero 1","url":"/api/financeiro/recebiveis/lancamento/nosso_numero1","method":"get","swaggerDoc":"","x":140,"y":640,"wires":[["a722ea36.17f368"]]},{"id":"a722ea36.17f368","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var sql = `\nSELECT \n    ISNULL(MAX(REC.nosso_numero), 0) AS nosso_numero \nFROM \n    REC INNER JOIN REC_PED ON REC.nosso_numero = REC_PED.nosso_numero;\n`\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    msg.payload = recordset;\n    console.dir(recordset);\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});","outputs":"1","noerr":0,"x":370,"y":640,"wires":[["3e423ee6.e72742"]]},{"id":"3e423ee6.e72742","type":"function","z":"8364cdd3.e51ef","name":"NOTIFY","func":"if (Array.isArray(msg.payload) && msg.payload.length > 0 && msg.payload[0].erro === undefined) {\n    \n    msg.payload = msg.payload[0];\n    return msg;\n    \n} else {\n    msg.statusCode = 500;\n    msg.payload = msg.payload[0];\n    return msg\n}\n","outputs":"1","noerr":0,"x":600,"y":640,"wires":[["7668e3c5.6e09cc"]]},{"id":"7668e3c5.6e09cc","type":"http response","z":"8364cdd3.e51ef","name":"","x":810,"y":640,"wires":[]},{"id":"ae1de6e2.511e98","type":"http in","z":"8364cdd3.e51ef","name":"nosso_numero 2","url":"/api/financeiro/recebiveis/lancamento/nosso_numero2","method":"get","swaggerDoc":"","x":140,"y":680,"wires":[["59c3c439.c815ec"]]},{"id":"59c3c439.c815ec","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var sql = \n    \"BEGIN TRY\" + '\\n' + '\\n' +\n\n    \"   SELECT ISNULL(MAX(RCB.nosso_numero), 0) AS nosso_numero FROM RCB WHERE NOT EXISTS(SELECT * FROM RCB_PED WHERE RCB.nosso_numero = RCB_PED.nosso_numero); \" + '\\n' + '\\n' +\n\n    \"END TRY\" + '\\n' +\n    \"BEGIN CATCH\" + '\\n' + '\\n' +\n    \n    \"   DECLARE @ERR_ID INT\" + '\\n' +\n    \"   SET @ERR_ID = NEXT VALUE FOR err_log_seq\" + '\\n' +\n    \"   INSERT INTO err_log SELECT @ERR_ID AS id, ERROR_NUMBER() AS erro, ERROR_SEVERITY() AS nivel, ERROR_STATE() AS situacao, ERROR_PROCEDURE() AS procedimento, ERROR_LINE() AS linha, ERROR_MESSAGE() AS mensagem\" + '\\n' + '\\n' +\n    \n    \"END CATCH\"\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    msg.payload = recordset;\n    console.dir(recordset);\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});","outputs":"1","noerr":0,"x":370,"y":680,"wires":[["52e14b5.f3a84b4"]]},{"id":"52e14b5.f3a84b4","type":"function","z":"8364cdd3.e51ef","name":"NOTIFY","func":"if (Array.isArray(msg.payload) && msg.payload.length > 0 && msg.payload[0].erro === undefined) {\n    \n    msg.payload = msg.payload[0];\n    return msg;\n    \n} else {\n    msg.statusCode = 500;\n    msg.payload = msg.payload[0];\n    return msg\n}\n","outputs":"1","noerr":0,"x":600,"y":680,"wires":[["6d55b78c.822178"]]},{"id":"6d55b78c.822178","type":"http response","z":"8364cdd3.e51ef","name":"","x":810,"y":680,"wires":[]},{"id":"2305b690.3492ba","type":"http in","z":"8364cdd3.e51ef","name":"login","url":"/api/usuario/login","method":"post","swaggerDoc":"","x":110,"y":240,"wires":[["1d6f3974.ea9cc7"]]},{"id":"c26f0cd.c8076f","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":240,"wires":[]},{"id":"1d6f3974.ea9cc7","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var sql = `\n    DECLARE @USUARIO NVARCHAR(20)\n    DECLARE @SENHA NVARCHAR(32)\n\n    SET @USUARIO = '${msg.payload.usuario}'\n    SET @SENHA = '${msg.payload.senha}'\n    \n    SELECT *\n    FROM\n        USR\n    WHERE\n        usuario = @USUARIO AND\n        senha = @SENHA\n`\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    if (Array.isArray(recordset) && recordset.length > 0) {\n        msg.payload = recordset[0];\n    } else {\n        msg.payload = {};\n    }\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});","outputs":1,"noerr":0,"x":370,"y":240,"wires":[["c26f0cd.c8076f"]]},{"id":"f20d25c4.61ac08","type":"http in","z":"8364cdd3.e51ef","name":"cobranca","url":"/api/financeiro/recebiveis/cobranca/","method":"post","swaggerDoc":"","x":120,"y":820,"wires":[["77433ac0.1e44b4"]]},{"id":"77433ac0.1e44b4","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"/*\nvar tarefa_atual = \n{\n    id: 0,\n    nome: 'Cobrança Bancária',\n    titulo: 'Gerar Remessa de Cobrança',\n    descricao: 'Saldo R$ ' + msg.payload.documento.cobranca.reduce( (total, c) => total + c.parcelas.filter( (p) => !p.selected && !p.carteira).reduce( (soma, p) => soma + p.valor, 0.0), 0.0).toFixed(2).replace('.', ','), \n    detalhes: '',\n    documento: JSON.stringify(\n        msg.payload.documento.cobranca.map( c => {\n            \n            var cobranca = {\n                nosso_numero: c.nosso_numero,\n                pedido: c.pedido,\n                cliente: c.cliente,\n                parcelas: c.parcelas.map( (p) => {\n                \n                    var parcela = {\n                        vencto: p.vencto,\n                        origem: p.origem,\n                        forma_pagto: p.forma_pagto,\n                        tipo_vencto: p.tipo_vencto,\n                        parcela: p.parcela,\n                        prazo: p.prazo,\n                        valor: p.valor\n                    }\n                    \n                    if (p.carteira) {\n                        parcela.carteira = p.carteira;\n                        parcela.remessa = p.remessa;\n                    } else if (p.selected) {\n                        parcela.carteira = msg.payload.documento.carteira.nome;\n                        parcela.remessa = new Date().toISOString();\n                    }\n                    \n                    return parcela;\n                    \n                })\n            };\n            \n            return cobranca;\n        })\n    ),\n    atribuir: 'financeiro',\n    atribuido: null,\n    form: '/recebiveis/cobranca/',\n    parametros: null,\n    prazo: null,\n    criado: new Date(),\n    concluido: null,\n    versao: 0\n}\n\nvar tarefa_remessa = \n{\n    id: 0,\n    nome: 'Remessa de Cobrança',\n    titulo: msg.payload.documento.carteira.nome,\n    descricao: 'Total R$ ' + msg.payload.documento.cobranca.reduce( (total, c) => total + c.parcelas.filter( (p) => p.selected && !p.carteira).reduce( (soma, p) => soma + p.valor, 0.0), 0.0).toFixed(2).replace('.', ','), \n    detalhes: '',\n    documento: JSON.stringify({ \n        \n        carteira: msg.payload.documento.carteira,\n        data: new Date().toISOString(),\n        \n        remessa: msg.payload.documento.cobranca.filter( cobranca => cobranca.parcelas.find( parcela => parcela.selected)).map( c => {\n            var cobranca = {\n                nosso_numero: c.nosso_numero,\n                pedido: c.pedido,\n                cliente: c.cliente,\n                parcelas: c.parcelas.filter( parcela => parcela.selected).map( (p) => {\n                \n                    var parcela = {\n                        vencto: p.vencto,\n                        origem: p.origem,\n                        forma_pagto: p.forma_pagto,\n                        tipo_vencto: p.tipo_vencto,\n                        parcela: p.parcela,\n                        prazo: p.prazo,\n                        valor: p.valor\n                    }\n                    \n                    parcela.carteira = msg.payload.documento.carteira.nome;\n                    parcela.remessa = new Date().toISOString();\n\n                    return parcela;\n                    \n                })\n            };\n            \n            return cobranca;\n        }),\n        \n        bordero: msg.payload.documento.bordero\n        \n    }),\n    atribuir: 'cobranca',\n    atribuido: null,\n    form: '/recebiveis/remessa/',\n    parametros: null,\n    prazo: null,\n    criado: new Date(),\n    concluido: null,\n    versao: 0\n}\n*/\n\n/*\nvar sql = `\n\nSET NOCOUNT ON\n\nDECLARE @NOSSO_NUMERO INT\nDECLARE @PARCELA INT\nDECLARE @CARTEIRA INT\n\nDECLARE @CONTA_CONTABIL VARCHAR(20)\nDECLARE @CNPJ VARCHAR(20)\nDECLARE @INSCRICAO VARCHAR(12)\nDECLARE @FANTASIA VARCHAR(30)\nDECLARE @NOME VARCHAR(100)\nDECLARE @LOGRADOURO VARCHAR(5)\nDECLARE @ENDERECO VARCHAR(50)\nDECLARE @NUMERO VARCHAR(10)\nDECLARE @COMPLEMENTO VARCHAR(20)\nDECLARE @BAIRRO VARCHAR(30)\nDECLARE @MUNICIPIO INT\nDECLARE @CIDADE VARCHAR(20)\nDECLARE @CEP CHAR(9)\nDECLARE @UF CHAR(2)\nDECLARE @DDD VARCHAR(3)\nDECLARE @TELEFONE VARCHAR(15)\nDECLARE @CONTATO VARCHAR(20)\n\nDECLARE @FORMA_PAGTO VARCHAR(10)\nDECLARE @TIPO_VENCTO VARCHAR(3)\nDECLARE @VENCTO DATE\nDECLARE @PRAZO INT\nDECLARE @PORCENTAGEM DECIMAL(18, 3)\nDECLARE @VALOR MONEY\nDECLARE @DESCRICAO VARCHAR(50)\nDECLARE @ORIGEM VARCHAR(10)\n\nDECLARE @TAREFA_ATUAL INT\nDECLARE @VERSAO INT\n\nDECLARE @NOVA_TAREFA INT\n\nDECLARE @ULTIMA_VERSAO INT\nDECLARE @CONCLUIDO DATETIME\n\nDECLARE @PROX_TAREFA INT\nDECLARE @PROX_TAREFA_VERSAO INT\n\nDECLARE @NOVA_NAV INT\n\nDECLARE @TRF TABLE (\n\t[id] [int] NOT NULL,\n\t[nome] [nvarchar](100) NOT NULL,\n\t[titulo] [nvarchar](50) NULL,\n\t[descricao] [nvarchar](50) NULL,\n\t[atribuir] [nvarchar](50) NULL,\n\t[form] [nvarchar](100) NOT NULL,\n\t[parametros] [nvarchar](max) NULL,\n\t[prazo] [datetime] NULL,\n\t[criado] [datetime] NOT NULL,\n\t[concluido] [datetime] NULL,\n\t[versao] [int],\n\t[topico] [nvarchar](100) NOT NULL)\n\t\nBEGIN TRY\n    BEGIN TRANSACTION\n\n    -------------------------------------- ATUALIZACAO DAS TAREFAS ----------------------------------------------\n    SET @TAREFA_ATUAL = CAST('${msg.req.params.tarefa}' AS INT) \n    SET @VERSAO = CAST('${msg.payload.versao}' AS INT)\n\n    UPDATE TRF SET\n\t    concluido = GETDATE()\n    WHERE\n        id = @TAREFA_ATUAL\n        AND concluido IS NULL\n        AND versao = @VERSAO\n\n    IF @@ROWCOUNT != 1\n    BEGIN\n\n        ROLLBACK TRANSACTION\n\n        SELECT TOP 1 @ULTIMA_VERSAO = versao, @CONCLUIDO = concluido FROM TRF WHERE id = @TAREFA_ATUAL\n\n        IF (NOT @CONCLUIDO IS NULL)\n        BEGIN\n            INSERT INTO ERR_LOG (erro, mensagem) SELECT erro, mensagem FROM ERR WHERE erro = 7010\n            SELECT * FROM ERR WHERE erro = 7010\n        END\n        ELSE IF (@ULTIMA_VERSAO <> @VERSAO)\n        BEGIN\n            INSERT INTO ERR_LOG (erro, mensagem) SELECT erro, mensagem FROM ERR WHERE erro = 7450\n            SELECT * FROM ERR WHERE erro = 7450\n        END\n\n        RETURN\n    END\n\n    INSERT INTO @TRF SELECT id, nome, titulo, descricao, atribuir, form, parametros, prazo, criado, concluido, versao, '/tarefas/concluida/' + LTRIM(RTRIM(atribuir)) AS topico FROM TRF WHERE id = @TAREFA_ATUAL\n\n    ---------------------------------------------------- grava as parcelas ----------------------------------------------------\n` +\n\nmsg.payload.documento.cobranca.reduce( (sql, c) => \n\n    sql + c.parcelas.filter( p => p.selected).reduce( (sql, p) => \n    \n        sql + \n`\n        \n    ----------------------------------------------------------------------------------------------------------\n    -- insere nova parcela => nosso_numero:  + ${c.nosso_numero} + ', parcela: ' + ${p.parcela} + ', carteira: ' + ${msg.payload.documento.carteira.id}\n    ----------------------------------------------------------------------------------------------------------\n    SET @NOSSO_NUMERO = CAST('${c.nosso_numero}' AS INT)\n    SET @PARCELA = CAST('${p.parcela}' AS INT)\n    SET @CARTEIRA = CAST('${msg.payload.documento.carteira.id}' AS INT)\n    \n    IF EXISTS(SELECT NOSSO_NUMERO FROM COB WHERE nosso_numero = @NOSSO_NUMERO AND parcela = @PARCELA AND carteira = @CARTEIRA)\n    BEGIN\n    \n       ROLLBACK TRANSACTION\n    \n       INSERT INTO ERR_LOG (erro, mensagem) SELECT erro, mensagem FROM ERR WHERE erro = 1123\n       SELECT * FROM ERR WHERE erro = 1123\n    \n       RETURN\n    END\n    \n    SET @NOSSO_NUMERO = CAST('${c.nosso_numero}' AS INT)\n    SET @PARCELA = CAST('${p.parcela}' AS INT)\n    SET @CARTEIRA = CAST('${msg.payload.documento.carteira.id}' AS INT)\n    \n    SET @CONTA_CONTABIL = CAST('${c.cliente.conta_contabil}' AS VARCHAR(20)) \n    SET @CNPJ = CAST('${c.cliente.cnpj}' AS VARCHAR(20))\n    SET @INSCRICAO = CAST('${c.cliente.inscricao}' AS VARCHAR(14))\n    SET @FANTASIA = CAST('${c.cliente.fantasia}' AS VARCHAR(30))\n    SET @NOME = CAST('${c.cliente.nome}' AS VARCHAR(100))\n    SET @LOGRADOURO = CAST('${c.cliente.logradouro}' AS VARCHAR(5))\n    SET @ENDERECO = CAST('${c.cliente.endereco}' AS VARCHAR(50))\n    SET @NUMERO = CAST('${c.cliente.numero}' AS VARCHAR(10))\n    SET @COMPLEMENTO = CAST('${c.cliente.complemento}' AS VARCHAR(20))\n    SET @BAIRRO = CAST('${c.cliente.bairro}' AS VARCHAR(30))\n    SET @MUNICIPIO = CAST('${c.cliente.municipio}' AS INT)\n    SET @CIDADE = CAST('${c.cliente.cidade}' AS VARCHAR(20))\n    SET @CEP = CAST('${c.cliente.CEP}' AS CHAR(9))\n    SET @UF = CAST('${c.cliente.UF}' AS CHAR(2))\n    SET @DDD = CAST('${c.cliente.ddd}' AS VARCHAR(3))\n    SET @TELEFONE = CAST('${c.cliente.telefone}' AS VARCHAR(15))\n    SET @CONTATO = CAST('${c.cliente.contato}' AS VARCHAR(20))\n    \n    SET @PARCELA = CAST('${p.parcela}' AS INT)\n    SET @FORMA_PAGTO = CAST('${p.forma_pagto}' AS VARCHAR(10))\n    SET @TIPO_VENCTO = CAST('${p.tipo_vencto}' AS VARCHAR(3))\n    SET @VENCTO = CAST('${p.vencto}' AS DATE)\n    SET @PRAZO = CAST('${p.prazo}' AS INT)\n    SET @VALOR = CAST('${p.valor}' AS MONEY)\n    SET @ORIGEM = CAST('${p.origem}' AS VARCHAR(10))\n    \n    INSERT INTO COB (nosso_numero, parcela, carteira, remessa, retorno, situacao, conta_contabil, forma_pagto, tipo_vencto, vencto, prazo, valor, origem, cnpj, inscricao, fantasia, nome, logradouro, endereco, numero, complemento, bairro, municipio, cidade, cep, uf, ddd, telefone, contato)\n    VALUES (@NOSSO_NUMERO, @PARCELA, @CARTEIRA, GETDATE(), NULL, NULL, @CONTA_CONTABIL, @FORMA_PAGTO, @TIPO_VENCTO, @VENCTO, @PRAZO, @VALOR, @ORIGEM, @CNPJ, @INSCRICAO, @FANTASIA, @NOME, @LOGRADOURO, @ENDERECO, @NUMERO, @COMPLEMENTO, @BAIRRO, @MUNICIPIO, @CIDADE, @CEP, @UF, @DDD, @TELEFONE, @CONTATO)\n    \n    UPDATE CRT SET\n       remessa = remessa + @VALOR\n    WHERE id = @CARTEIRA\n\n`\n    , '')\n\n, '') +\n\n(msg.payload.documento.cobranca.find( (c) => c.parcelas.find( (p) => !p.selected && !p.carteira) ) ?\n\n`\n    ----------------------- TAREFA AINDA PENDENTE, RECRIA A TAREFA -----------------------\n    SELECT TOP 1 @PROX_TAREFA = id, @PROX_TAREFA_VERSAO = versao FROM TRF WHERE nome = '${tarefa_atual.nome}' AND concluido IS NULL\n\n    IF @PROX_TAREFA IS NULL\n    BEGIN\n\n        SET @PROX_TAREFA = NEXT VALUE FOR tarefa_seq\n\n        INSERT INTO TRF\n            (id,\n            nome,\n            titulo,\n            descricao,\n            detalhes,\n            documento,\n            atribuir,\n            form,\n            parametros,\n            prazo,\n            criado,\n            concluido)\n        VALUES\n            (@PROX_TAREFA,\n            '${tarefa_atual.nome}',\n            '${tarefa_atual.titulo}',\n            'Saldo R$ ${msg.payload.documento.cobranca.reduce( (total, c) => total + c.parcelas.filter( (p) => !p.selected && !p.carteira).reduce( (soma, p) => soma + p.valor, 0.0), 0.0).toFixed(2).replace('.', ',')}',\n            '',\n            '${tarefa_atual.documento}',\n            '${tarefa_atual.atribuir}',\n            '${tarefa_atual.form}',\n            NULL,\n            NULL,\n            GETDATE(),\n            NULL)\n\n        SET @NOVA_NAV = NEXT VALUE FOR tarefa_nav_seq\n\n        INSERT TRFN (transacao, tarefa_origem, tarefa_destino) VALUES (NEXT VALUE FOR tarefa_nav_seq, @TAREFA_ATUAL, @PROX_TAREFA)\n\n        INSERT INTO @TRF SELECT id, nome, titulo, descricao, atribuir, form, parametros, prazo, criado, concluido, versao, '/tarefas/nova/' + LTRIM(RTRIM(atribuir)) AS topico FROM TRF WHERE id = @PROX_TAREFA\n\n    END\n    ELSE\n    BEGIN\n\n        UPDATE TRF SET\n            descricao = 'Saldo R$${msg.payload.documento.cobranca.reduce( (total, c) => total + c.parcelas.filter( (p) => !p.selected && !p.carteira).reduce( (soma, p) => soma + p.valor, 0.0), 0.0).toFixed(2).replace('.', ',')}',\n            documento = '${tarefa_atual.documento}'\n        WHERE\n            id = @PROX_TAREFA\n            AND versao = @PROX_TAREFA_VERSAO\n\n        IF @@ROWCOUNT != 1\n        BEGIN\n\n            ROLLBACK TRANSACTION\n\n            SELECT TOP 1 @ULTIMA_VERSAO = versao, @CONCLUIDO = concluido FROM TRF WHERE id = @TAREFA_ATUAL\n\n            IF (NOT @CONCLUIDO IS NULL)\n            BEGIN\n                INSERT INTO ERR_LOG (erro, mensagem) SELECT erro, mensagem FROM ERR WHERE erro = 7010\n                SELECT * FROM ERR WHERE erro = 7010\n            END\n            ELSE IF (@ULTIMA_VERSAO <> @VERSAO)\n            BEGIN\n                INSERT INTO ERR_LOG (erro, mensagem) SELECT erro, mensagem FROM ERR WHERE erro = 7450\n                SELECT * FROM ERR WHERE erro = 7450\n            END\n\n            RETURN\n        END\n\n        INSERT INTO @TRF SELECT id, nome, titulo, descricao, atribuir, form, parametros, prazo, criado, concluido, versao, '/tarefas/atualizada/' + LTRIM(RTRIM(atribuir)) AS topico FROM TRF WHERE id = @PROX_TAREFA\n\n    END\n`\n\n:\n\n`\n   -- tarefa finalizada e nenhuma tarefa nova criada --\n`\n\n) +\n\n(msg.payload.documento.cobranca.find( (c) => c.parcelas.find( (p) => p.selected && !p.carteira) ) ?\n\n`\n   -------------------------- PROXIMA TAREFA - REMESSA -----------------------\n\n    SET @PROX_TAREFA = NEXT VALUE FOR tarefa_seq\n\n    INSERT INTO TRF\n        (id,\n        nome,\n        titulo,\n        descricao,\n        detalhes,\n        documento,\n        atribuir,\n        form,\n        parametros,\n        prazo,\n        criado,\n        concluido)\n    VALUES\n        (@PROX_TAREFA,\n        '${tarefa_remessa.nome}',\n        '${tarefa_remessa.titulo}',\n        '${tarefa_remessa.descricao}',\n        '',\n        '${tarefa_remessa.documento}',\n        '${tarefa_remessa.atribuir}',\n        '${tarefa_remessa.form}',\n        NULL,\n        NULL,\n        GETDATE(),\n        NULL)\n\n    SET @NOVA_NAV = NEXT VALUE FOR tarefa_nav_seq\n\n    INSERT TRFN (transacao, tarefa_origem, tarefa_destino) VALUES (NEXT VALUE FOR tarefa_nav_seq, @TAREFA_ATUAL, @PROX_TAREFA)\n\n    INSERT INTO @TRF SELECT id, nome, titulo, descricao, atribuir, form, parametros, prazo, criado, concluido, versao, '/tarefas/nova/' + LTRIM(RTRIM(atribuir)) AS topico FROM TRF WHERE id = @PROX_TAREFA\n`\n\n:\n\n`\n    -- tarefa finalizada e nenhuma tarefa nova criada --\n`\n\n) +\n\n`\n    COMMIT TRANSACTION\n\nEND TRY\nBEGIN CATCH\n\n    DECLARE @ERR_ID INT\n    DECLARE @ERROR_NUMBER INT\n    DECLARE @ERROR_SEVERITY INT\n    DECLARE @ERROR_STATE INT\n    DECLARE @ERROR_PROCEDURE INT\n    DECLARE @ERROR_LINE INT\n    DECLARE @ERROR_MESSAGE NVARCHAR(MAX)\n\n    SET @ERROR_NUMBER = ERROR_NUMBER()\n    SET @ERROR_SEVERITY = ERROR_SEVERITY()\n    SET @ERROR_STATE = ERROR_STATE()\n    SET @ERROR_PROCEDURE = ERROR_PROCEDURE()\n    SET @ERROR_LINE = ERROR_LINE()\n    SET @ERROR_MESSAGE = ERROR_MESSAGE()\n\n    ROLLBACK TRANSACTION\n\n    SET @ERR_ID = NEXT VALUE FOR err_log_seq\n    INSERT INTO err_log SELECT @ERR_ID AS id, @ERROR_NUMBER AS erro, @ERROR_SEVERITY AS nivel, @ERROR_STATE AS situacao, @ERROR_PROCEDURE AS procedimento, @ERROR_LINE AS linha, @ERROR_MESSAGE AS mensagem\n\n    SELECT * FROM err_log WHERE id = @ERR_ID\n\n    RETURN\nEND CATCH\n\nSELECT * FROM @TRF\n`\n*/\n\nvar mssql = global.get('mssql');\n\nvar procedure_name = 'LANCAMENTO_COBRANCA'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\nrequest.input('CARTEIRA', mssql.Int, parseInt(msg.payload.documento.carteira.id))\n\nvar cobrancas = new mssql.Table()\n\ncobrancas.columns.add('carteira', mssql.Int);\ncobrancas.columns.add('nosso_numero', mssql.Int);\ncobrancas.columns.add('conta_contabil', mssql.VarChar(56));\ncobrancas.columns.add('cnpj', mssql.VarChar(20))\n\ncobrancas.columns.add('inscricao', mssql.VarChar(12))\ncobrancas.columns.add('fantasia', mssql.VarChar(50))\ncobrancas.columns.add('nome', mssql.VarChar(100))\ncobrancas.columns.add('logradouro', mssql.VarChar(5))\ncobrancas.columns.add('endereco', mssql.VarChar(50))\ncobrancas.columns.add('numero', mssql.VarChar(10))\ncobrancas.columns.add('complemento', mssql.VarChar(20))\ncobrancas.columns.add('bairro', mssql.VarChar(30))\ncobrancas.columns.add('municipio', mssql.Int);\ncobrancas.columns.add('cidade', mssql.VarChar(30))\ncobrancas.columns.add('cep', mssql.VarChar(9))\ncobrancas.columns.add('uf', mssql.Char(2))\ncobrancas.columns.add('ddd', mssql.VarChar(3))\ncobrancas.columns.add('telefone', mssql.VarChar(15))\ncobrancas.columns.add('contato', mssql.VarChar(20))\n\nif (msg.payload.documento.cobranca.parcelas.find( parcela => parcela.selected)) { \n\n    var cobranca = msg.payload.documento.cobranca;\n    \n    var row = {\n        \n        carteira: msg.payload.documento.carteira.id,\n        nosso_numero: parseInt(cobranca.nosso_numero),\n        conta_contabil: cobranca.cliente.conta_contabil,\n        cnpj: cobranca.cliente.cnpj,\n        \n        inscricao: cobranca.cliente.inscricao,\n        fantasia: cobranca.cliente.fantasia,\n        nome: cobranca.cliente.nome,\n        logradouro: cobranca.cliente.logradouro,\n        endereco: cobranca.cliente.endereco,\n        numero: cobranca.cliente.numero,\n        complemento: cobranca.cliente.complemento,\n        bairro: cobranca.cliente.bairro,\n        municipio: cobranca.cliente.municipio,\n        cidade: cobranca.cliente.cidade,\n        cep: cobranca.cliente.CEP,\n        uf: cobranca.cliente.UF,\n        ddd: cobranca.cliente.ddd,\n        telefone: cobranca.cliente.telefone,\n        contato: cobranca.cliente.contato\n    }\n    \n    console.log(JSON.stringify(row, null, 2));\n    \n    cobrancas.rows.add(\n\n        row.carteira,\n        row.nosso_numero,\n        row.conta_contabil,\n        row.cnpj,\n        \n        row.inscricao,\n        row.fantasia,\n        row.nome,\n        row.logradouro,\n        row.endereco,\n        row.numero,\n        row.complemento,\n        row.bairro,\n        row.municipio,\n        row.cidade,\n        row.cep,\n        row.uf,\n        row.ddd,\n        row.telefone,\n        row.contato\n        \n    );\n    \n}\n\nrequest.input('COBRANCA', cobrancas)\n\nvar parcelas = new mssql.Table()\n\nparcelas.columns.add('carteira', mssql.Int);\nparcelas.columns.add('nosso_numero', mssql.Int);\nparcelas.columns.add('parcela', mssql.Int);\n\nparcelas.columns.add('forma_pagto', mssql.VarChar(10));\nparcelas.columns.add('tipo_vencto', mssql.VarChar(3));\nparcelas.columns.add('vencto', mssql.Date);\nparcelas.columns.add('prazo', mssql.Int);\nparcelas.columns.add('valor', mssql.Money);\n\nmsg.payload.documento.cobranca.parcelas.filter( parcela => parcela.selected).forEach( (parcela) => \n    {\n        var cobranca = msg.payload.documento.cobranca;\n        \n        parcelas.rows.add(\n            \n            msg.payload.documento.carteira.id,\n            parseInt(cobranca.nosso_numero),\n            parcela.parcela,\n            \n            parcela.forma_pagto,\n            parcela.tipo_vencto,\n            new Date(parcela.vencto),\n            parcela.prazo,\n            parcela.valor\n            \n        )\n    }\n)\n\n\nrequest.input('PARCELAS', parcelas)\n\n/*------------------------ TAREFAS------------------------*/\nvar tarefas = new mssql.Table()\n\ntarefas.columns.add('id', mssql.Int);\ntarefas.columns.add('nome', mssql.NVarChar(100));\ntarefas.columns.add('titulo', mssql.NVarChar(50));\ntarefas.columns.add('descricao', mssql.NVarChar(50));\ntarefas.columns.add('detalhes', mssql.NVarChar(100));\ntarefas.columns.add('documento', mssql.NVarChar(mssql.MAX));\ntarefas.columns.add('atribuir', mssql.NVarChar(50));\ntarefas.columns.add('atribuido', mssql.NVarChar(50));\ntarefas.columns.add('form', mssql.NVarChar(100));\ntarefas.columns.add('parametros', mssql.NVarChar(mssql.MAX));\ntarefas.columns.add('prazo', mssql.DateTime2(7));\ntarefas.columns.add('criado', mssql.DateTime2(7));\ntarefas.columns.add('concluido', mssql.DateTime2(7));\ntarefas.columns.add('versao', mssql.Int);\ntarefas.columns.add('operacao', mssql.VarChar(10));\n\ntarefas.rows.add(\n    msg.payload.id,\n    msg.payload.nome,\n    msg.payload.titulo,\n    msg.payload.descricao,\n    msg.payload.detalhes,\n    JSON.stringify(msg.payload.documento), \n    msg.payload.atribuir,\n    msg.payload.atribuido,\n    msg.payload.form,\n    msg.payload.parametros,\n    msg.payload.prazo,\n    msg.payload.criado,\n    msg.payload.concluido,\n    parseInt(msg.payload.versao),\n    'CONCLUIR'\n);\n\nif (msg.payload.documento.cobranca.parcelas.find( (p) => !p.selected && !p.carteira) ) {\n    var tarefa = \n    {\n        id: msg.payload.id,\n        nome: 'Cobrança Bancária',\n        titulo: msg.payload.documento.cobranca.cliente.fantasia, \n        descricao: 'Resta R$ ' + msg.payload.documento.cobranca.parcelas.filter( (p) => !p.selected && !p.carteira).reduce( (soma, p) => soma + p.valor, 0.0).toFixed(2).replace('.', ','), \n        detalhes: '',\n        documento: JSON.stringify({\n            tipo: 'cobranca',\n            nosso_numero: msg.payload.documento.cobranca.nosso_numero,\n            pedido: msg.payload.documento.cobranca.pedido,\n            cliente: msg.payload.documento.cobranca.cliente,\n            parcelas: msg.payload.documento.cobranca.parcelas.map( (p) => {\n            \n                var parcela = {\n                    vencto: p.vencto,\n                    origem: p.origem,\n                    forma_pagto: p.forma_pagto,\n                    tipo_vencto: p.tipo_vencto,\n                    parcela: p.parcela,\n                    prazo: p.prazo,\n                    valor: p.valor\n                }\n                \n                if (p.carteira) {\n                    parcela.carteira = p.carteira;\n                    parcela.remessa = p.remessa;\n                } else if (p.selected) {\n                    parcela.carteira = msg.payload.documento.carteira.nome;\n                    parcela.remessa = new Date().toISOString();\n                }\n                \n                return parcela;\n                \n            })\n        }),\n        atribuir: 'financeiro',\n        atribuido: null,\n        form: '/recebiveis/cobranca/',\n        parametros: null,\n        prazo: null,\n        criado: new Date(),\n        concluido: null,\n        versao: 0\n    }\n    \n    tarefas.rows.add(\n        tarefa.id,\n        tarefa.nome,\n        tarefa.titulo,\n        tarefa.descricao,\n        tarefa.detalhes,\n        tarefa.documento, \n        tarefa.atribuir,\n        tarefa.atribuido,\n        tarefa.form,\n        tarefa.parametros,\n        tarefa.prazo,\n        tarefa.criado,\n        tarefa.concluido,\n        tarefa.versao,\n        'REPETIR'\n    );    \n}\n\nif (msg.payload.documento.cobranca.parcelas.find( (p) => p.selected && !p.carteira) ) {\n    var tarefa = \n    {\n        id: 0,\n        nome: 'Remessa de Cobrança',\n        titulo: msg.payload.documento.carteira.nome,\n        descricao: 'Total R$ ' + msg.payload.documento.cobranca.parcelas.filter( (p) => p.selected && !p.carteira).reduce( (soma, p) => soma + p.valor, 0.0).toFixed(2).replace('.', ','), \n        detalhes: '',\n        documento: JSON.stringify({ \n            \n            tipo: 'remessa',\n            \n            data: new Date().toISOString(),\n\n            nosso_numero: msg.payload.documento.cobranca.nosso_numero,\n            pedido: msg.payload.documento.cobranca.pedido,\n            \n            cliente: msg.payload.documento.cobranca.cliente,\n\n            carteira: msg.payload.documento.carteira,\n            \n            parcelas: msg.payload.documento.cobranca.parcelas.filter( parcela => parcela.selected).map( (p) => {\n            \n                var parcela = {\n                    vencto: p.vencto,\n                    origem: p.origem,\n                    forma_pagto: p.forma_pagto,\n                    tipo_vencto: p.tipo_vencto,\n                    parcela: p.parcela,\n                    prazo: p.prazo,\n                    valor: p.valor\n                }\n                \n                parcela.carteira = msg.payload.documento.carteira.nome;\n                parcela.remessa = new Date().toISOString();\n\n                return parcela;\n                \n            }),\n            \n            bordero: msg.payload.documento.bordero\n            \n        }),\n        atribuir: 'cobranca',\n        atribuido: null,\n        form: '/recebiveis/remessa/',\n        parametros: null,\n        prazo: null,\n        criado: new Date(),\n        concluido: null,\n        versao: 0\n    }  \n\n    tarefas.rows.add(\n        0,\n        tarefa.nome,\n        tarefa.titulo,\n        tarefa.descricao,\n        tarefa.detalhes,\n        tarefa.documento, \n        tarefa.atribuir,\n        tarefa.atribuido,\n        tarefa.form,\n        tarefa.parametros,\n        tarefa.prazo,\n        tarefa.criado,\n        tarefa.concluido,\n        tarefa.versao,\n        'PROXIMA'\n    );    \n}\n\nrequest.input('TAREFAS', tarefas)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    /*console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected);*/ // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets || [{ erro: 9997, mensagem: 'A procedure foi executada mas não retornou resposta para esta solicitação !'}];\n    console.log(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.log(err)\n    console.log('*****************************  Erro ao chamar Stored Procedure ' + procedure_name + '  *****************************\\n' + (err !== null && typeof err === 'object' ? JSON.stringify(err, null, 2) : err || \"Erro desconhecido\"))\n    msg.payload = err !== null && typeof err === 'object' ? err : { erro: 9999, mensagem: err || \"Erro desconhecido\"};\n    node.error(msg);\n    node.send(msg);\n});\n\n","outputs":"1","noerr":0,"x":370,"y":820,"wires":[["4d432ad9.ca7604"]]},{"id":"d744ef30.6bc5a","type":"function","z":"8364cdd3.e51ef","name":"","func":"msg.payload = [ { \"id\": 1339, \"nome\": \"Lançamentos a Receber\", \"titulo\": \"Pedido 74782\", \"descricao\": \"CERAMICA VELAS DE IGNICAO NGK BRASIL LTDA\", \"atribuir\": \"faturamento\", \"form\": \"/recebiveis/lancamento/\", \"parametros\": null, \"prazo\": null, \"criado\": \"2016-12-09T09:38:59.156Z\", \"concluido\": \"2016-12-09T09:39:21.036Z\" }, { \"id\": 1340, \"nome\": \"Cobrança Bancária\", \"titulo\": \"Gerar Remessa de Cobrança\", \"descricao\": \"\", \"atribuir\": \"financeiro\", \"form\": \"/recebiveis/cobranca/\", \"parametros\": null, \"prazo\": null, \"criado\": \"2016-12-09T09:39:21.036Z\", \"concluido\": null } ]\nif (Array.isArray(msg.payload) && msg.payload.length > 0 && msg.payload[0].erro === undefined) {\n    \n    var payload = msg.payload;\n    msg.payload = {erro: 0, mensagem: 'Tarefa concluida com sucesso !'};\n    \n    var msgs = []\n    \n    msgs.push(msg);\n    \n    msgs.push({\n        topic: '/tarefas/concluida/' + payload[0].atribuir,\n        payload: payload[0]\n    });\n\n    if (msg.payload.length > 1) {\n        msgs.push({\n            topic: '/tarefas/nova/' + payload[1].atribuir,\n            payload: payload[1]\n        })\n    }\n    \n    return msgs;\n    \n} else {\n    msg.statusCode = 500;\n    msg.payload = msg.payload[0];\n    return [msg, null, null]\n}\n","outputs":"3","noerr":0,"x":370,"y":1040,"wires":[["e9b4f529.e08558"],["de61a1c1.31b52"],["77d6e97d.207188"]]},{"id":"e9b4f529.e08558","type":"debug","z":"8364cdd3.e51ef","name":"","active":true,"console":"false","complete":"payload","x":610,"y":1000,"wires":[]},{"id":"21623fa3.170d2","type":"inject","z":"8364cdd3.e51ef","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":140,"y":1040,"wires":[["d744ef30.6bc5a"]]},{"id":"de61a1c1.31b52","type":"debug","z":"8364cdd3.e51ef","name":"","active":true,"console":"false","complete":"payload","x":610,"y":1040,"wires":[]},{"id":"77d6e97d.207188","type":"debug","z":"8364cdd3.e51ef","name":"","active":true,"console":"false","complete":"payload","x":610,"y":1080,"wires":[]},{"id":"aaf43019.ea287","type":"function","z":"8364cdd3.e51ef","name":"tarefa","func":"msg.topic = msg.payload.topico;\n\nreturn msg;","outputs":1,"noerr":0,"x":950,"y":860,"wires":[["425f2801.c62d98","228e73dc.279d7c"]]},{"id":"ad3f152e.9dc208","type":"split","z":"8364cdd3.e51ef","name":"","splt":"\\n","x":790,"y":860,"wires":[["aaf43019.ea287"]]},{"id":"3fc7d67f.aff46a","type":"function","z":"8364cdd3.e51ef","name":"erro","func":"if ((msg.payload.erro && msg.payload.erro !== 0) || (msg.payload.number) || (msg.payload.message)) {\n    msg.statusCode = 500;\n\n    msg.payload = msg.payload || {};\n    msg.payload.erro = msg.payload.erro || msg.payload.error || msg.payload.number || 9999;\n    msg.payload.mensagem = msg.payload.mensagem || msg.payload.message || 'Ocorreu um erro interno ao executar a sua solicitação.'\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":790,"y":820,"wires":[["6ce56352.b491cc"]]},{"id":"6ce56352.b491cc","type":"http response","z":"8364cdd3.e51ef","name":"","x":950,"y":820,"wires":[]},{"id":"228e73dc.279d7c","type":"debug","z":"8364cdd3.e51ef","name":"","active":false,"console":"false","complete":"payload","x":1130,"y":900,"wires":[]},{"id":"2605e59e.a912ca","type":"function","z":"8364cdd3.e51ef","name":"","func":"msg.payload = {\n  \"id\": 1307,\n  \"nome\": \"Lançamentos a Receber\",\n  \"titulo\": \"Pedido 74749\",\n  \"concluido\": null,\n  \"versao\": {\n    \"type\": \"Buffer\",\n    \"data\": [\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      8,\n      10\n    ]\n  }\n}\nvar str = String.fromCharCode.apply(null, msg.payload.versao.data);\n    \nmsg.payload.buffer = str;\n\nreturn msg;\n","outputs":"1","noerr":0,"x":370,"y":1160,"wires":[["78a1b0be.e8c97"]]},{"id":"ff8211f3.d51b9","type":"inject","z":"8364cdd3.e51ef","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":140,"y":1160,"wires":[["2605e59e.a912ca"]]},{"id":"78a1b0be.e8c97","type":"debug","z":"8364cdd3.e51ef","name":"","active":true,"console":"false","complete":"payload","x":610,"y":1160,"wires":[]},{"id":"2d5450aa.3824b","type":"debug","z":"8364cdd3.e51ef","name":"","active":true,"console":"false","complete":"payload","x":810,"y":780,"wires":[]},{"id":"1a48ecd2.7eac53","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":1240,"wires":[]},{"id":"287b8973.5e1606","type":"catch","z":"8364cdd3.e51ef","name":"","scope":null,"x":120,"y":1260,"wires":[["e30879a1.f103e8","b8d6f5ff.5d2148"]]},{"id":"e30879a1.f103e8","type":"debug","z":"8364cdd3.e51ef","name":"","active":true,"console":"false","complete":"payload.documento.cobranca","x":460,"y":1280,"wires":[]},{"id":"b8d6f5ff.5d2148","type":"function","z":"8364cdd3.e51ef","name":"erro","func":"msg.statusCode = 500;\n\nreturn msg;","outputs":1,"noerr":0,"x":370,"y":1240,"wires":[["1a48ecd2.7eac53"]]},{"id":"a02b838e.836bb","type":"http in","z":"8364cdd3.e51ef","name":"remessa","url":"/api/financeiro/recebiveis/remessa/","method":"post","swaggerDoc":"","x":120,"y":860,"wires":[["462456b9.809e08"]]},{"id":"462456b9.809e08","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"/*\nvar sql = `\n\nSET NOCOUNT ON\n\nDECLARE @REMESSA INT\nDECLARE @NOSSO_NUMERO INT\nDECLARE @PARCELA INT\nDECLARE @CARTEIRA INT\n\nDECLARE @VALOR_TITULOS MONEY\nDECLARE @VALOR_LIQUIDO MONEY\nDECLARE @VALOR_OPERACAO MONEY\nDECLARE @VALOR_TARIFA MONEY\nDECLARE @VALOR_JUROS MONEY\nDECLARE @VALOR_IOF MONEY\nDECLARE @TAXA_JUROS DECIMAL(18,2)\n\nDECLARE @FORMA_PAGTO VARCHAR(10)\nDECLARE @TIPO_VENCTO VARCHAR(3)\nDECLARE @VENCTO DATE\nDECLARE @PRAZO INT\nDECLARE @VALOR MONEY\n\nDECLARE @TAREFA_ATUAL INT\nDECLARE @VERSAO INT\n\nDECLARE @NOVA_TAREFA INT\n\nDECLARE @ULTIMA_VERSAO INT\nDECLARE @CONCLUIDO DATETIME\n\nDECLARE @PROX_TAREFA INT\nDECLARE @PROX_TAREFA_VERSAO INT\n\nDECLARE @NOVA_NAV INT\n\nDECLARE @TRF TABLE (\n    [id] [int] NOT NULL,\n\t[nome] [nvarchar](100) NOT NULL,\n\t[titulo] [nvarchar](50) NULL,\n\t[descricao] [nvarchar](50) NULL,\n\t[atribuir] [nvarchar](50) NULL,\n\t[form] [nvarchar](100) NOT NULL,\n\t[parametros] [nvarchar](max) NULL,\n\t[prazo] [datetime] NULL,\n\t[criado] [datetime] NOT NULL,\n\t[concluido] [datetime] NULL,\n\t[versao] [int],\n\t[topico] [nvarchar](100) NOT NULL)\n\nBEGIN TRY\n    BEGIN TRANSACTION\n\n    -------------------------------------- ATUALIZACAO DAS TAREFAS ----------------------------------------------\n    SET @TAREFA_ATUAL =  CAST('${parseInt(msg.req.params.tarefa)}' AS INT)\n    SET @VERSAO = CAST('${msg.payload.versao}' AS INT)\n\n    UPDATE TRF SET\n\t    concluido = GETDATE()\n    WHERE\n        id = @TAREFA_ATUAL\n        AND concluido IS NULL\n        AND versao = @VERSAO\n\n    IF @@ROWCOUNT != 1\n    BEGIN\n\n        ROLLBACK TRANSACTION\n\n        SELECT TOP 1 @ULTIMA_VERSAO = versao, @CONCLUIDO = concluido FROM TRF WHERE id = @TAREFA_ATUAL\n\n        IF (NOT @CONCLUIDO IS NULL)\n        BEGIN\n            INSERT INTO ERR_LOG (erro, mensagem) SELECT erro, mensagem FROM ERR WHERE erro = 7010\n            SELECT * FROM ERR WHERE erro = 7010\n        END\n        ELSE IF (@ULTIMA_VERSAO <> @VERSAO)\n        BEGIN\n            INSERT INTO ERR_LOG (erro, mensagem) SELECT erro, mensagem FROM ERR WHERE erro = 7450\n            SELECT * FROM ERR WHERE erro = 7450\n        END\n\n        RETURN\n    END\n\n    INSERT INTO @TRF SELECT id, nome, titulo, descricao, atribuir, form, parametros, prazo, criado, concluido, versao, '/tarefas/concluida/' + LTRIM(RTRIM(atribuir)) AS topico FROM TRF WHERE id = @TAREFA_ATUAL\n\n    ---------------------------------------------------- cabecalho da remessa ----------------------------------------------------\n    SET @VALOR_TITULOS = CAST('${msg.payload.documento.bordero.valor_titulos}' AS MONEY) \n    SET @VALOR_LIQUIDO = CAST('${msg.payload.documento.bordero.valor_liquido}' AS MONEY)\n    SET @VALOR_OPERACAO = CAST('${msg.payload.documento.bordero.valor_operacao}' AS MONEY)\n    SET @VALOR_TARIFA = CAST('${msg.payload.documento.bordero.valor_tarifa}' AS MONEY)\n    SET @VALOR_JUROS = CAST('${msg.payload.documento.bordero.valor_juros}' AS MONEY)\n    SET @VALOR_IOF = CAST('${msg.payload.documento.bordero.valor_iof}' AS MONEY)\n    SET @TAXA_JUROS = CAST('${msg.payload.documento.bordero.taxa_juros}' AS DECIMAL(18,2))\n\n    SET @CARTEIRA = CAST('${msg.payload.documento.carteira.id}' AS INT)\n\n    SET @REMESSA = NEXT VALUE FOR remessa_seq\n\n    INSERT INTO REM (\n        remessa,\n        carteira,\n        valor_titulos,\n        valor_liquido,\n        valor_operacao,\n        valor_tarifa,\n        valor_iof,\n        valor_juros,\n        taxa_juros)\n    VALUES (\n        @REMESSA,\n        @CARTEIRA,\n        @VALOR_TITULOS,\n        @VALOR_LIQUIDO,\n        @VALOR_OPERACAO,\n        @VALOR_TARIFA,\n        @VALOR_IOF,\n        @VALOR_JUROS,\n        @TAXA_JUROS)\n\n    UPDATE CRT SET\n        utilizado = utilizado + @VALOR_TITULOS,\n        remessa = remessa - @VALOR_TITULOS,\n        retorno = retorno + @VALOR_TITULOS\n    WHERE id = @CARTEIRA\n\n    ---------------------------------------------------- grava as parcelas ----------------------------------------------------\n    ` +\n\nmsg.payload.documento.remessa.reduce( (sql, r) => \n\n    sql + r.parcelas.reduce( (sql, p) => \n    \n        sql + \n    `\n    ----------------------------------------------------------------------------------------------------------\n    -- insere nova parcela => nosso_numero:  + ${r.nosso_numero} + ', parcela: ' + ${p.parcela} + ', carteira: ' + ${msg.payload.documento.carteira.id}\n    ----------------------------------------------------------------------------------------------------------\n    SET @NOSSO_NUMERO = CAST('${r.nosso_numero}' AS INT)\n    SET @PARCELA = CAST('${p.parcela}' AS INT)\n    SET @CARTEIRA = CAST('${msg.payload.documento.carteira.id}' AS INT)\n\n    IF EXISTS(SELECT NOSSO_NUMERO FROM REMD WHERE nosso_numero = @NOSSO_NUMERO AND parcela = @PARCELA AND carteira = @CARTEIRA)\n    BEGIN\n\n        ROLLBACK TRANSACTION\n\n        INSERT INTO ERR_LOG (erro, mensagem) SELECT erro, mensagem FROM ERR WHERE erro = 1123\n        SELECT * FROM ERR WHERE erro = 1123\n\n        RETURN\n    END\n\n    SET @FORMA_PAGTO = CAST('${p.forma_pagto}' AS VARCHAR(10))\n    SET @TIPO_VENCTO = CAST('${p.tipo_vencto}' AS VARCHAR(3))\n    SET @VENCTO = CAST('${p.vencto}' AS DATE)\n    SET @PRAZO = CAST('${p.prazo}' AS INT)\n    SET @VALOR = CAST('${p.valor}' AS MONEY)\n\n    INSERT INTO REMD (remessa, nosso_numero, parcela, carteira, forma_pagto, tipo_vencto, vencto, prazo, valor)\n    VALUES (@REMESSA, @NOSSO_NUMERO, @PARCELA, @CARTEIRA, @FORMA_PAGTO, @TIPO_VENCTO, @VENCTO, @PRAZO, @VALOR) \n    \n    `\n    \n    , '')\n\n, '') +\n\n`\n    -------------------------- PROXIMA TAREFA - RETORNO -----------------------\n    \n    SET @PROX_TAREFA = NEXT VALUE FOR tarefa_seq\n    \n    INSERT INTO TRF\n        (id,\n        nome,\n        titulo,\n        descricao,\n        detalhes,\n        documento,\n        atribuir,\n        form,\n        parametros,\n        prazo,\n        criado,\n        concluido)\n    VALUES\n        (@PROX_TAREFA,\n        '${tarefa_retorno.nome}',\n        '${tarefa_retorno.titulo}',\n        '${tarefa_retorno.descricao}',\n        '',\n        '${tarefa_retorno.documento}',\n        '${tarefa_retorno.atribuir}',\n        '${tarefa_retorno.form}',\n        NULL,\n        NULL,\n        GETDATE(),\n        NULL)\n        \n    SET @NOVA_NAV = NEXT VALUE FOR tarefa_nav_seq\n    \n    INSERT TRFN (transacao, tarefa_origem, tarefa_destino) VALUES (NEXT VALUE FOR tarefa_nav_seq, @TAREFA_ATUAL, @PROX_TAREFA)\n    \n    INSERT INTO @TRF SELECT id, nome, titulo, descricao, atribuir, form, parametros, prazo, criado, concluido, versao, '/tarefas/nova/' + LTRIM(RTRIM(atribuir)) AS topico FROM TRF WHERE id = @PROX_TAREFA\n    \n    COMMIT TRANSACTION\n\nEND TRY\nBEGIN CATCH\n\n   DECLARE @ERR_ID INT\n   DECLARE @ERROR_NUMBER INT\n   DECLARE @ERROR_SEVERITY INT\n   DECLARE @ERROR_STATE INT\n   DECLARE @ERROR_PROCEDURE INT\n   DECLARE @ERROR_LINE INT\n   DECLARE @ERROR_MESSAGE NVARCHAR(MAX)\n\n   SET @ERROR_NUMBER = ERROR_NUMBER()\n   SET @ERROR_SEVERITY = ERROR_SEVERITY()\n   SET @ERROR_STATE = ERROR_STATE()\n   SET @ERROR_PROCEDURE = ERROR_PROCEDURE()\n   SET @ERROR_LINE = ERROR_LINE()\n   SET @ERROR_MESSAGE = ERROR_MESSAGE()\n\n   ROLLBACK TRANSACTION\n\n   SET @ERR_ID = NEXT VALUE FOR err_log_seq\n   INSERT INTO err_log SELECT @ERR_ID AS id, @ERROR_NUMBER AS erro, @ERROR_SEVERITY AS nivel, @ERROR_STATE AS situacao, @ERROR_PROCEDURE AS procedimento, @ERROR_LINE AS linha, @ERROR_MESSAGE AS mensagem\n\n   SELECT * FROM err_log WHERE id = @ERR_ID\n\n   RETURN\nEND CATCH\n\nSELECT * FROM @TRF\n`    \n*/\n\nvar remessa = msg.payload.documento;\nvar { cliente, carteira, bordero } = remessa;\n\nvar mssql = global.get('mssql');\n\nvar procedure_name = 'LANCAMENTO_REMESSA'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\nrequest.input('CARTEIRA', mssql.Int, parseInt(carteira.id))\nrequest.input('VALOR_TITULOS', mssql.Money, bordero.valor_titulos)\nrequest.input('VALOR_LIQUIDO', mssql.Money, bordero.valor_liquido)\nrequest.input('VALOR_OPERACAO', mssql.Money, bordero.valor_operacao)\nrequest.input('VALOR_TARIFA', mssql.Money, bordero.valor_tarifa)\nrequest.input('VALOR_JUROS', mssql.Money, bordero.valor_juros)\nrequest.input('VALOR_IOF', mssql.Money, bordero.valor_iof)\nrequest.input('TAXA_JUROS', mssql.Decimal(18,2), bordero.taxa_juros)\n\nvar pagadores = new mssql.Table()\n\npagadores.columns.add('cnpj', mssql.VarChar(20))\n\npagadores.columns.add('inscricao', mssql.VarChar(12))\npagadores.columns.add('fantasia', mssql.VarChar(50))\npagadores.columns.add('nome', mssql.VarChar(100))\npagadores.columns.add('logradouro', mssql.VarChar(5))\npagadores.columns.add('endereco', mssql.VarChar(50))\npagadores.columns.add('numero', mssql.VarChar(10))\npagadores.columns.add('complemento', mssql.VarChar(20))\npagadores.columns.add('bairro', mssql.VarChar(30))\npagadores.columns.add('municipio', mssql.Int);\npagadores.columns.add('cidade', mssql.VarChar(20))\npagadores.columns.add('cep', mssql.VarChar(9))\npagadores.columns.add('uf', mssql.Char(2))\npagadores.columns.add('ddd', mssql.VarChar(3))\npagadores.columns.add('telefone', mssql.VarChar(15))\npagadores.columns.add('contato', mssql.VarChar(20))\n\nif (remessa.parcelas.find( parcela => parcela.selected)) { \n\n    var row = {\n        cnpj: cliente.cnpj,\n        \n        inscricao: cliente.inscricao,\n        fantasia: cliente.fantasia,\n        nome: cliente.nome,\n        logradouro: cliente.logradouro,\n        endereco: cliente.endereco,\n        numero: cliente.numero,\n        complemento: cliente.complemento,\n        bairro: cliente.bairro,\n        municipio: cliente.municipio,\n        cidade: cliente.cidade,\n        cep: cliente.CEP,\n        uf: cliente.UF,\n        ddd: cliente.ddd,\n        telefone: cliente.telefone,\n        contato: cliente.contato\n    }\n    \n    console.log(JSON.stringify(row, null, 2));\n    \n    pagadores.rows.add(\n\n        row.cnpj,\n        \n        row.inscricao,\n        row.fantasia,\n        row.nome,\n        row.logradouro,\n        row.endereco,\n        row.numero,\n        row.complemento,\n        row.bairro,\n        row.municipio,\n        row.cidade,\n        row.cep,\n        row.uf,\n        row.ddd,\n        row.telefone,\n        row.contato\n        \n    );\n    \n}\n\nrequest.input('PAGADORES', pagadores)\n\nvar parcelas = new mssql.Table()\n\nparcelas.columns.add('remessa', mssql.Int);\nparcelas.columns.add('nosso_numero', mssql.Int);\nparcelas.columns.add('parcela', mssql.Int);\n\nparcelas.columns.add('forma_pagto', mssql.VarChar(10));\nparcelas.columns.add('tipo_vencto', mssql.VarChar(3));\nparcelas.columns.add('vencto', mssql.Date);\nparcelas.columns.add('prazo', mssql.Int);\nparcelas.columns.add('valor', mssql.Money);\n\nremessa.parcelas.filter( parcela => parcela.selected).forEach( (parcela) => \n    {\n\n        parcelas.rows.add(\n            \n            0,\n            parseInt(remessa.nosso_numero),\n            parcela.parcela,\n            \n            parcela.forma_pagto,\n            parcela.tipo_vencto,\n            new Date(parcela.vencto),\n            parcela.prazo,\n            parcela.valor\n            \n        )\n        \n    }\n)\n\nrequest.input('PARCELAS', parcelas)\n\n/*------------------------ TAREFAS------------------------*/\nvar tarefas = new mssql.Table()\n\ntarefas.columns.add('id', mssql.Int);\ntarefas.columns.add('nome', mssql.NVarChar(100));\ntarefas.columns.add('titulo', mssql.NVarChar(50));\ntarefas.columns.add('descricao', mssql.NVarChar(50));\ntarefas.columns.add('detalhes', mssql.NVarChar(100));\ntarefas.columns.add('documento', mssql.NVarChar(mssql.MAX));\ntarefas.columns.add('atribuir', mssql.NVarChar(50));\ntarefas.columns.add('atribuido', mssql.NVarChar(50));\ntarefas.columns.add('form', mssql.NVarChar(100));\ntarefas.columns.add('parametros', mssql.NVarChar(mssql.MAX));\ntarefas.columns.add('prazo', mssql.DateTime2(7));\ntarefas.columns.add('criado', mssql.DateTime2(7));\ntarefas.columns.add('concluido', mssql.DateTime2(7));\ntarefas.columns.add('versao', mssql.Int);\ntarefas.columns.add('operacao', mssql.VarChar(10));\n\ntarefas.rows.add(\n    msg.payload.id,\n    msg.payload.nome,\n    msg.payload.titulo,\n    msg.payload.descricao,\n    msg.payload.detalhes,\n    JSON.stringify(msg.payload.documento), \n    msg.payload.atribuir,\n    msg.payload.atribuido,\n    msg.payload.form,\n    msg.payload.parametros,\n    msg.payload.prazo,\n    msg.payload.criado,\n    msg.payload.concluido,\n    parseInt(msg.payload.versao),\n    'CONCLUIR'\n);\n\nvar tarefa = \n{\n    id: 0,\n    nome: 'Retorno de Cobrança',\n    titulo: carteira.nome,\n    descricao: 'Total R$ ' + remessa.parcelas.reduce( (soma, p) => soma + p.valor, 0).toFixed(2).replace('.', ','), \n    detalhes: '',\n    documento: JSON.stringify({ \n        \n        tipo: 'retorno',\n        \n        carteira: carteira,\n        data: new Date().toISOString(),\n        \n        retorno: {\n            nosso_numero: remessa.nosso_numero,\n            pedido: remessa.pedido,\n            cliente: cliente,\n            parcelas: remessa.parcelas.map( (p) => {\n            \n                var parcela = {\n                    vencto: p.vencto,\n                    origem: p.origem,\n                    forma_pagto: p.forma_pagto,\n                    tipo_vencto: p.tipo_vencto,\n                    parcela: p.parcela,\n                    prazo: p.prazo,\n                    valor: p.valor\n                }\n                \n                parcela.carteira = p.carteira;\n                parcela.data = p.data;\n\n                return parcela;\n                \n            })\n        }\n        \n    }),\n    atribuir: 'cobranca',\n    atribuido: null,\n    form: '/recebiveis/retorno/',\n    parametros: null,\n    prazo: null,\n    criado: new Date(),\n    concluido: null,\n    versao: 0    \n}\n\ntarefas.rows.add(\n    tarefa.id,\n    tarefa.nome,\n    tarefa.titulo,\n    tarefa.descricao,\n    tarefa.detalhes,\n    tarefa.documento, \n    tarefa.atribuir,\n    tarefa.atribuido,\n    tarefa.form,\n    tarefa.parametros,\n    tarefa.prazo,\n    tarefa.criado,\n    tarefa.concluido,\n    tarefa.versao,\n    'PROXIMA'\n);    \n\nrequest.input('TAREFAS', tarefas)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    /*console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected);*/ // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets || [{ erro: 9997, mensagem: 'A procedure foi executada mas não retornou resposta para esta solicitação !'}];\n    console.log(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.log(err)\n    console.log('*****************************  Erro ao chamar Stored Procedure ' + procedure_name + '  *****************************\\n' + (err !== null && typeof err === 'object' ? JSON.stringify(err, null, 2) : err || \"Erro desconhecido\"))\n    msg.payload = err !== null && typeof err === 'object' ? err : { erro: 9999, mensagem: err || \"Erro desconhecido\"};\n    node.error(msg);\n    node.send(msg);\n});\n","outputs":"1","noerr":0,"x":370,"y":860,"wires":[["4d432ad9.ca7604"]]},{"id":"1fdbc8e9.b3d427","type":"http in","z":"8364cdd3.e51ef","name":"retorno","url":"/api/financeiro/recebiveis/retorno/","method":"post","swaggerDoc":"","x":110,"y":900,"wires":[["82c577a8.c949f8"]]},{"id":"82c577a8.c949f8","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"/*\nvar sql = \n`\nSET NOCOUNT ON\n\nDECLARE @RETORNO INT\nDECLARE @NOSSO_NUMERO INT\nDECLARE @PARCELA INT\nDECLARE @CARTEIRA INT\n\nDECLARE @DATA AS DATE\nDECLARE @VALOR_TITULOS MONEY\nDECLARE @VALOR_LIQUIDO MONEY\nDECLARE @VALOR_OPERACAO MONEY\nDECLARE @VALOR_TARIFA MONEY\nDECLARE @VALOR_JUROS MONEY\nDECLARE @VALOR_IOF MONEY\nDECLARE @TAXA_JUROS DECIMAL(18,2)\n\nDECLARE @FORMA_PAGTO VARCHAR(10)\nDECLARE @TIPO_VENCTO VARCHAR(3)\nDECLARE @VENCTO DATE\nDECLARE @PRAZO INT\nDECLARE @VALOR MONEY\nDECLARE @ACEITO BIT\n\nDECLARE @TAREFA_ATUAL INT\nDECLARE @VERSAO INT\n\nDECLARE @NOVA_TAREFA INT\n\nDECLARE @ULTIMA_VERSAO INT\nDECLARE @CONCLUIDO DATETIME\n\nDECLARE @PROX_TAREFA INT\nDECLARE @PROX_TAREFA_VERSAO INT\n\nDECLARE @NOVA_NAV INT\n\nDECLARE @TRF TABLE (\n    [id] [int] NOT NULL,\n\t[nome] [nvarchar](100) NOT NULL,\n\t[titulo] [nvarchar](50) NULL,\n\t[descricao] [nvarchar](50) NULL,\n\t[atribuir] [nvarchar](50) NULL,\n\t[form] [nvarchar](100) NOT NULL,\n\t[parametros] [nvarchar](max) NULL,\n\t[prazo] [datetime] NULL,\n\t[criado] [datetime] NOT NULL,\n\t[concluido] [datetime] NULL,\n\t[versao] [int],\n\t[topico] [nvarchar](100) NOT NULL)\n\t\nBEGIN TRY\n    BEGIN TRANSACTION\n\n    -------------------------------------- ATUALIZACAO DAS TAREFAS ----------------------------------------------\n    SET @TAREFA_ATUAL =  CAST('${msg.req.params.tarefa}' AS INT)\n    SET @VERSAO = CAST('${msg.payload.versao}' AS INT)\n\n    UPDATE TRF SET\n\t    concluido = GETDATE()\n    WHERE\n        id = @TAREFA_ATUAL\n        AND concluido IS NULL\n        AND versao = @VERSAO\n\n    IF @@ROWCOUNT != 1\n    BEGIN\n\n        ROLLBACK TRANSACTION\n\n        SELECT TOP 1 @ULTIMA_VERSAO = versao, @CONCLUIDO = concluido FROM TRF WHERE id = @TAREFA_ATUAL\n\n        IF (NOT @CONCLUIDO IS NULL)\n        BEGIN\n            INSERT INTO ERR_LOG (erro, mensagem) SELECT erro, mensagem FROM ERR WHERE erro = 7010\n            SELECT * FROM ERR WHERE erro = 7010\n        END\n        ELSE IF (@ULTIMA_VERSAO <> @VERSAO)\n        BEGIN\n            INSERT INTO ERR_LOG (erro, mensagem) SELECT erro, mensagem FROM ERR WHERE erro = 7450\n            SELECT * FROM ERR WHERE erro = 7450\n        END\n\n        RETURN\n    END\n\n    INSERT INTO @TRF SELECT id, nome, titulo, descricao, atribuir, form, parametros, prazo, criado, concluido, versao, '/tarefas/concluida/' + LTRIM(RTRIM(atribuir)) AS topico FROM TRF WHERE id = @TAREFA_ATUAL\n\n    ---------------------------------------------------- cabecalho do retorno ----------------------------------------------------\n    SET @VALOR_TITULOS = CAST('${msg.payload.documento.bordero.valor_titulos}' AS MONEY) \n    SET @VALOR_LIQUIDO = CAST('${msg.payload.documento.bordero.valor_liquido}' AS MONEY)\n    SET @VALOR_OPERACAO = CAST('${msg.payload.documento.bordero.valor_operacao}' AS MONEY)\n    SET @VALOR_TARIFA = CAST('${msg.payload.documento.bordero.valor_tarifa}' AS MONEY)\n    SET @VALOR_JUROS = CAST('${msg.payload.documento.bordero.valor_juros}' AS MONEY)\n    SET @VALOR_IOF = CAST('${msg.payload.documento.bordero.valor_iof}' AS MONEY)\n    SET @TAXA_JUROS = CAST('${msg.payload.documento.bordero.taxa_juros}' AS DECIMAL(18,2))\n\n    SET @CARTEIRA = CAST('${msg.payload.documento.carteira.id}' AS INT)\n\n    SET @RETORNO = NEXT VALUE FOR retorno_seq\n\n    INSERT INTO RET (\n        retorno,\n        carteira,\n        valor_titulos,\n        valor_liquido,\n        valor_operacao,\n        valor_tarifa,\n        valor_iof,\n        valor_juros,\n        taxa_juros)\n    VALUES (\n        @RETORNO,\n        @CARTEIRA,\n        @VALOR_TITULOS,\n        @VALOR_LIQUIDO,\n        @VALOR_OPERACAO,\n        @VALOR_TARIFA,\n        @VALOR_IOF,\n        @VALOR_JUROS,\n        @TAXA_JUROS)\n\n    SET @CARTEIRA = CAST('${msg.payload.documento.carteira.id}' AS INT)\n\n    UPDATE CRT SET\n        utilizado = utilizado - @VALOR_TITULOS,\n        retorno = retorno - @VALOR_TITULOS,\n        total_iof = total_iof + @VALOR_IOF,\n        total_juros = total_juros + @VALOR_JUROS,\n        total_tarifas = total_tarifas + @VALOR_TARIFA + @VALOR_OPERACAO,\n        taxa_juros = @TAXA_JUROS\n    WHERE id = @CARTEIRA\n\n    ---------------------------------------------------- grava as parcelas ---------------------------------------------------- \n` +\n    \nmsg.payload.documento.retorno.reduce( (sql, r) => \n\n    sql + r.parcelas.reduce( (sql, p) => \n    \n        sql + \n`\n    ----------------------------------------------------------------------------------------------------------\n    -- insere nova parcela => nosso_numero:  + r.nosso_numero + ', parcela: ' + p.parcela + ', carteira: ' + msg.payload.documento.carteira.id +\n    ----------------------------------------------------------------------------------------------------------\n    SET @NOSSO_NUMERO = CAST('${r.nosso_numero}' AS INT)\n    SET @PARCELA = CAST('${p.parcela}' AS INT)\n    SET @CARTEIRA = CAST('${msg.payload.documento.carteira.id}' AS INT)\n    \n    IF EXISTS(SELECT NOSSO_NUMERO FROM RETD WHERE nosso_numero = @NOSSO_NUMERO AND parcela = @PARCELA AND carteira = @CARTEIRA)\n    BEGIN\n    \n       ROLLBACK TRANSACTION\n    \n       INSERT INTO ERR_LOG (erro, mensagem) SELECT erro, mensagem FROM ERR WHERE erro = 7010\n       SELECT * FROM ERR WHERE erro = 1123\n    \n       RETURN\n    END\n    \n    SET @FORMA_PAGTO = CAST('${p.forma_pagto}' AS VARCHAR(10))\n    SET @TIPO_VENCTO = CAST('${p.tipo_vencto}' AS VARCHAR(3))\n    SET @VENCTO = CAST('${p.vencto}' AS DATE)\n    SET @PRAZO = CAST('${p.prazo}' AS INT)\n    SET @VALOR = CAST('${p.valor}' AS MONEY)\n    SET @ACEITO = CAST('${p.aceito}' AS BIT)\n    \n    INSERT INTO RETD (retorno, nosso_numero, parcela, carteira, forma_pagto, tipo_vencto, vencto, prazo, valor, aceito)\n    VALUES (@RETORNO, @NOSSO_NUMERO, @PARCELA, @CARTEIRA, @FORMA_PAGTO, @TIPO_VENCTO, @VENCTO, @PRAZO, @VALOR, @ACEITO)\n\n`\n\n    , '')\n\n, '') +\n\n/*\n   -------------------------- PROXIMA TAREFA - RETORNO -----------------------\n\n   SET @PROX_TAREFA = NEXT VALUE FOR tarefa_seq\n\n   INSERT INTO TRF\n       (id,\n       nome,\n       titulo,\n       descricao,\n       detalhes,\n       documento,\n       atribuir,\n       form,\n       parametros,\n       prazo,\n       criado,\n       concluido)\n   VALUES\n       (@PROX_TAREFA,\n       ' + tarefa_retorno.nome + ',\n       ' + tarefa_retorno.titulo + ',\n       ' + tarefa_retorno.descricao + ',\n       '',\n       ' + tarefa_retorno.documento + ',\n       ' + tarefa_retorno.atribuir + ',\n       ' + tarefa_retorno.form + ',\n       NULL,\n       NULL,\n       GETDATE(),\n       NULL)\n\n   SET @NOVA_NAV = NEXT VALUE FOR TRFN_seq\n\n   INSERT TRFN (transacao, tarefa_origem, tarefa_destino) VALUES (NEXT VALUE FOR TRFN_seq, @TAREFA_ATUAL, @PROX_TAREFA)\n\n   INSERT INTO @TRF SELECT id, nome, titulo, descricao, atribuir, form, parametros, prazo, criado, concluido, versao, '/tarefas/nova/' + LTRIM(RTRIM(atribuir)) AS topico FROM TRF WHERE id = @PROX_TAREFA\n*/\n/*\n`\n   COMMIT TRANSACTION\n\nEND TRY\nBEGIN CATCH\n\n   DECLARE @ERR_ID INT\n   DECLARE @ERROR_NUMBER INT\n   DECLARE @ERROR_SEVERITY INT\n   DECLARE @ERROR_STATE INT\n   DECLARE @ERROR_PROCEDURE INT\n   DECLARE @ERROR_LINE INT\n   DECLARE @ERROR_MESSAGE NVARCHAR(MAX)\n\n   SET @ERROR_NUMBER = ERROR_NUMBER()\n   SET @ERROR_SEVERITY = ERROR_SEVERITY()\n   SET @ERROR_STATE = ERROR_STATE()\n   SET @ERROR_PROCEDURE = ERROR_PROCEDURE()\n   SET @ERROR_LINE = ERROR_LINE()\n   SET @ERROR_MESSAGE = ERROR_MESSAGE()\n\n   ROLLBACK TRANSACTION\n\n   SET @ERR_ID = NEXT VALUE FOR err_log_seq\n   INSERT INTO err_log SELECT @ERR_ID AS id, @ERROR_NUMBER AS erro, @ERROR_SEVERITY AS nivel, @ERROR_STATE AS situacao, @ERROR_PROCEDURE AS procedimento, @ERROR_LINE AS linha, @ERROR_MESSAGE AS mensagem\n\n   SELECT * FROM err_log WHERE id = @ERR_ID\n\n   RETURN\nEND CATCH\n\nSELECT * FROM @TRF\n\n`\n*/\n\nvar mssql = global.get('mssql');\n\nvar procedure_name = 'RET_INSERE'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\nrequest.input('CARTEIRA', mssql.Int, parseInt(msg.payload.documento.carteira.id))\nrequest.input('VALOR_TITULOS', mssql.Money, msg.payload.documento.bordero.valor_titulos)\nrequest.input('VALOR_LIQUIDO', mssql.Money, msg.payload.documento.bordero.valor_liquido)\nrequest.input('VALOR_OPERACAO', mssql.Money, msg.payload.documento.bordero.valor_operacao)\nrequest.input('VALOR_TARIFA', mssql.Money, msg.payload.documento.bordero.valor_tarifa)\nrequest.input('VALOR_JUROS', mssql.Money, msg.payload.documento.bordero.valor_juros)\nrequest.input('VALOR_IOF', mssql.Money, msg.payload.documento.bordero.valor_iof)\nrequest.input('TAXA_JUROS', mssql.Decimal(18,2), msg.payload.documento.bordero.taxa_juros)\n\nvar parcelas = new mssql.Table()\n\nparcelas.columns.add('retorno', mssql.Int);\nparcelas.columns.add('nosso_numero', mssql.Int);\nparcelas.columns.add('parcela', mssql.Int);\n\nparcelas.columns.add('forma_pagto', mssql.VarChar(10));\nparcelas.columns.add('tipo_vencto', mssql.VarChar(3));\nparcelas.columns.add('vencto', mssql.Date);\nparcelas.columns.add('prazo', mssql.Int);\nparcelas.columns.add('valor', mssql.Money);\nparcelas.columns.add('aceito', mssql.Bit);\n\nmsg.payload.documento.retorno.forEach( (retorno) => \n    retorno.parcelas.forEach( (parcela) => \n    \n        {\n\n            parcelas.rows.add(\n                \n                0,\n                parseInt(retorno.nosso_numero),\n                parcela.parcela,\n                \n                parcela.forma_pagto,\n                parcela.tipo_vencto,\n                new Date(parcela.vencto),\n                parcela.prazo,\n                parcela.valor,\n                parcela.aceito\n                \n            )\n        }\n    )\n)\n\nrequest.input('PARCELAS', parcelas)\n\n/*------------------------ TAREFAS------------------------*/\nvar tarefas = new mssql.Table()\n\ntarefas.columns.add('id', mssql.Int);\ntarefas.columns.add('nome', mssql.NVarChar(100));\ntarefas.columns.add('titulo', mssql.NVarChar(50));\ntarefas.columns.add('descricao', mssql.NVarChar(50));\ntarefas.columns.add('detalhes', mssql.NVarChar(100));\ntarefas.columns.add('documento', mssql.NVarChar(mssql.MAX));\ntarefas.columns.add('atribuir', mssql.NVarChar(50));\ntarefas.columns.add('atribuido', mssql.NVarChar(50));\ntarefas.columns.add('form', mssql.NVarChar(100));\ntarefas.columns.add('parametros', mssql.NVarChar(mssql.MAX));\ntarefas.columns.add('prazo', mssql.DateTime2(7));\ntarefas.columns.add('criado', mssql.DateTime2(7));\ntarefas.columns.add('concluido', mssql.DateTime2(7));\ntarefas.columns.add('versao', mssql.Int);\ntarefas.columns.add('operacao', mssql.VarChar(10));\n\ntarefas.rows.add(\n    msg.payload.id,\n    msg.payload.nome,\n    msg.payload.titulo,\n    msg.payload.descricao,\n    msg.payload.detalhes,\n    JSON.stringify(msg.payload.documento), \n    msg.payload.atribuir,\n    msg.payload.atribuido,\n    msg.payload.form,\n    msg.payload.parametros,\n    msg.payload.prazo,\n    msg.payload.criado,\n    msg.payload.concluido,\n    parseInt(msg.payload.versao),\n    'CONCLUIR'\n);\n\nrequest.input('TAREFAS', tarefas)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    /*console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected);*/ // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets || [{ erro: 9997, mensagem: 'A procedure foi executada mas não retornou resposta para esta solicitação !'}];\n    console.log(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.log(err)\n    console.log('*****************************  Erro ao chamar Stored Procedure ' + procedure_name + '  *****************************\\n' + (err !== null && typeof err === 'object' ? JSON.stringify(err, null, 2) : err || \"Erro desconhecido\"))\n    msg.payload = err !== null && typeof err === 'object' ? err : { erro: 9999, mensagem: err || \"Erro desconhecido\"};\n    node.error(msg);\n    node.send(msg);\n});\n\n","outputs":"1","noerr":0,"x":370,"y":900,"wires":[["4d432ad9.ca7604"]]},{"id":"cacc252c.da94b8","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"\nvar sql = `\n    SELECT \n        * \n    FROM \n        REM INNER JOIN CRT ON REM.carteira = CRT.id \n    WHERE \n        NOT EXISTS (\n            SELECT * \n            FROM REM_PAR INNER JOIN RET_PAR ON \n                REM_PAR.nosso_numero = RET_PAR.nosso_numero AND \n                REM_PAR.parcela = RET_PAR.parcela \n            WHERE \n                REM_PAR.remessa = REM.remessa\n        ) \n    ORDER BY \n        data DESC\n`\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    msg.payload = recordset;\n    console.dir(recordset);\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});","outputs":1,"noerr":0,"x":370,"y":480,"wires":[["16dd87d5.bf8408"]]},{"id":"6bb58641.45d108","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"\nvar sql = `\n    SELECT TOP 5 \n        * \n    FROM \n        RET INNER JOIN CRT ON RET.carteira = CRT.id\n    ORDER BY \n        data DESC\n`\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    msg.payload = recordset;\n    console.dir(recordset);\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});","outputs":1,"noerr":0,"x":370,"y":520,"wires":[["b8961160.84e59"]]},{"id":"350966b2.088d5a","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var sql = `\n    DECLARE @PERFIL NVARCHAR(50)\n    \n    SET @PERFIL = '${msg.req.query.perfil}'\n    \n    SELECT\n       id,\n       nome,\n       titulo,\n       descricao,\n       detalhes,\n       atribuir,\n       form,\n       parametros,\n       prazo,\n       criado,\n       CAST(versao AS INT) AS versao\n    FROM\n    \tTRF\n    WHERE\n       concluido IS NULL AND\n       (atribuir IS NULL OR atribuir IN (@PERFIL))\n    ORDER BY\n       criado \n`\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    msg.payload = recordset;\n    console.dir(recordset);\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});","outputs":1,"noerr":0,"x":370,"y":360,"wires":[["90301d10.51d19"]]},{"id":"3b66eb20.472f94","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var sql = \n`\nSELECT [id]\n    ,[nome]\n    ,[titulo]\n    ,[descricao]\n    ,[detalhes]\n    ,[documento]\n    ,[atribuir]\n    ,[atribuido]\n    ,[form]\n    ,[parametros]\n    ,[prazo]\n    ,[criado]\n    ,[concluido]\n    ,CAST([versao] AS INT) AS versao\nFROM \n    [dbo].[TRF]\nWHERE \n    id = ${msg.req.params.id}\n`\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    msg.payload = recordset.map( function(t) {\n        t.documento = JSON.parse(t.documento);\n        return t;\n    })[0];\n    console.log(recordset);\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});","outputs":1,"noerr":0,"x":370,"y":400,"wires":[["490068d9.065828"]]},{"id":"c7f3f97e.fd28a8","type":"inject","z":"8364cdd3.e51ef","name":"connect","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"x":140,"y":40,"wires":[["de88862d.60a398"]]},{"id":"de88862d.60a398","type":"function","z":"8364cdd3.e51ef","name":"FINANCEIRO","func":"var mssql = global.get('mssql');\n\nvar FINANCEIRO = new mssql.Connection(\"mssql://financeiro:financeiro@localhost/FINANCEIRO\", function(err) {\n    if (err) {\n        console.dir('-------------> ERRO NA CONEXAO FINANCEIRO !!!!!! <-------------')\n    } else {\n        global.set('FINANCEIRO', FINANCEIRO);\n        console.dir('CONECTADO FINANCEIRO !')\n        \n        FINANCEIRO.on('error', function(err) {\n            node.error({payload: err || { erro: 9996, mensagem: 'Erro desconhecido na conexão'}})\n        });\n        \n    }\n});\n","outputs":1,"noerr":0,"x":400,"y":40,"wires":[["26f16e58.fc58d2"]]},{"id":"26f16e58.fc58d2","type":"debug","z":"8364cdd3.e51ef","name":"result","active":true,"console":"false","complete":"payload","x":590,"y":40,"wires":[]},{"id":"5b98361f.2cc198","type":"inject","z":"8364cdd3.e51ef","name":"test","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":130,"y":120,"wires":[["886023b6.cd8ca"]]},{"id":"886023b6.cd8ca","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql')\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query('select top 1 * from usr').then(function(recordset) {\n    node.send({payload:recordset})\n    console.dir(recordset);\n}).catch(function(err) {\n    node.error(err)\n});\n","outputs":1,"noerr":0,"x":370,"y":120,"wires":[["d7fa3253.f306"]]},{"id":"d7fa3253.f306","type":"debug","z":"8364cdd3.e51ef","name":"","active":true,"console":"false","complete":"false","x":610,"y":120,"wires":[]},{"id":"524eba0a.1f8e34","type":"inject","z":"8364cdd3.e51ef","name":"connect","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"x":140,"y":80,"wires":[["21b633c.4653dcc"]]},{"id":"21b633c.4653dcc","type":"function","z":"8364cdd3.e51ef","name":"GPIMAC","func":"var mssql = global.get('mssql');\n\nvar GPIMAC = new mssql.Connection(\"mssql://gpimac:215083@localhost/GPIMAC_Altamira\", function(err) {\n    if (err) {\n        console.dir('-------------> ERRO NA CONEXAO GPIMAC !!!!!! <-------------')\n    } else {\n        global.set('GPIMAC', GPIMAC);\n        console.dir('CONECTADO GPIMAC !')\n\n        GPIMAC.on('error', function(err) {\n            node.error({payload: err || { erro: 9996, mensagem: 'Erro desconhecido na conexão'}})\n        });\n        \n    }\n});\n","outputs":1,"noerr":0,"x":380,"y":80,"wires":[["33613505.e8fd1a"]]},{"id":"33613505.e8fd1a","type":"debug","z":"8364cdd3.e51ef","name":"result","active":true,"console":"false","complete":"payload","x":590,"y":80,"wires":[]},{"id":"399afff5.09c41","type":"http in","z":"8364cdd3.e51ef","name":"carteira","url":"/api/financeiro/carteiras","method":"get","swaggerDoc":"","x":110,"y":440,"wires":[["9e7c447.631dbb8"]]},{"id":"ebf541d1.78413","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":440,"wires":[]},{"id":"8bff708b.30ad7","type":"http in","z":"8364cdd3.e51ef","name":"remessa","url":"/api/financeiro/remessas","method":"get","swaggerDoc":"","x":120,"y":480,"wires":[["cacc252c.da94b8"]]},{"id":"d4299bc5.9a6c28","type":"http in","z":"8364cdd3.e51ef","name":"retorno","url":"/api/financeiro/retornos","method":"get","swaggerDoc":"","x":110,"y":520,"wires":[["6bb58641.45d108"]]},{"id":"854b9e80.92a76","type":"http in","z":"8364cdd3.e51ef","name":"tarefas","url":"/api/tarefas/","method":"get","swaggerDoc":"","x":110,"y":360,"wires":[["350966b2.088d5a"]]},{"id":"433582e7.5c20ec","type":"http in","z":"8364cdd3.e51ef","name":"tarefa/:id","url":"/api/tarefa/:id","method":"get","swaggerDoc":"","x":120,"y":400,"wires":[["3b66eb20.472f94"]]},{"id":"490068d9.065828","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":400,"wires":[]},{"id":"90301d10.51d19","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":360,"wires":[]},{"id":"b8961160.84e59","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":520,"wires":[]},{"id":"16dd87d5.bf8408","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":480,"wires":[]},{"id":"200bfa80.747bf6","type":"http in","z":"8364cdd3.e51ef","name":"titulo","url":"/api/financeiro/recebiveis/lancamento/titulo/:nosso_numero","method":"get","swaggerDoc":"","x":110,"y":560,"wires":[["2a7f5343.f7ebfc"]]},{"id":"2a7f5343.f7ebfc","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'TITULO'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\nrequest.input('NOSSO_NUMERO', mssql.Int, msg.req.params.nosso_numero)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets[0][0] || [{ erro: 9997, mensagem: 'A procedure foi executada mas não retornou resposta para esta solicitação !'}];\n    msg.payload.cliente = recordsets[1][0];\n    msg.payload.representante = recordsets[2][0] || {};\n    msg.payload.parcelas = recordsets[3];\n    console.dir(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure' + procedure_name + ' <-----------------\\n' + JSON.stringify(err))\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n","outputs":"1","noerr":0,"x":370,"y":560,"wires":[["7e313261.557e2c"]]},{"id":"7e313261.557e2c","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":560,"wires":[]},{"id":"bee6db0c.63da38","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'IMPORT_PEDIDOS_LIBERADOS'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets || [{ erro: 9997, mensagem: 'A procedure foi executada mas não retornou resposta para esta solicitação !'}];\n    console.dir(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure' + procedure_name + ' <-----------------\\n' + JSON.stringify(err))\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n    ","outputs":"1","noerr":0,"x":370,"y":740,"wires":[["4d432ad9.ca7604"]]},{"id":"88f6234d.a798e","type":"inject","z":"8364cdd3.e51ef","name":"Pedido Liberado","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"*/1 8-17 * * 1,2,3,4,5","once":false,"x":170,"y":740,"wires":[["bee6db0c.63da38"]]},{"id":"dbfc0827.c590a8","type":"http in","z":"8364cdd3.e51ef","name":"GPIMAC Pedido","url":"/api/gpimac/pedido/:numero","method":"get","swaggerDoc":"","x":140,"y":200,"wires":[["3fabf2af.45329e"]]},{"id":"8370d9a2.9d83a8","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":200,"wires":[]},{"id":"3fabf2af.45329e","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'CARREGA_PEDIDO_GPIMAC'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\n// ---------------------- CAMPOS DA TRANSACAO ------------------------------------------\nrequest.input('NUMERO', mssql.Int, msg.req.params.numero)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets[0][0];\n    msg.payload.cliente = recordsets[1][0];\n    msg.payload.representante = recordsets[2][0];\n    msg.payload.totais = recordsets[3][0];\n    msg.payload.parcelas = recordsets[4];\n    \n    console.dir(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure' + procedure_name + ' <-----------------\\n' + JSON.stringify(err))\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n    ","outputs":1,"noerr":0,"x":370,"y":200,"wires":[["8370d9a2.9d83a8"]]},{"id":"1395abe2.7dcfd4","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'FN_CONTAS_LIST'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets[0].map( banco => {\n        banco.agencias = recordsets[1].filter( agencia => agencia.banco === banco.id).map( agencia => {\n            agencia.contas = recordsets[2].filter( conta => agencia.banco === conta.banco && agencia.agencia === conta.agencia)\n            return agencia;\n        })\n        return {\n            id: banco.id,\n            codigo: banco.codigo,\n            nome: banco.nome,\n            agencias: banco.agencias.map( agencia => {\n                return {\n                    agencia: agencia.agencia,\n                    contas: agencia.contas.map( conta => {\n                        return {\n                            id: conta.id,\n                            conta: conta.conta,\n                            saldo: conta.saldo,\n                            ativo: conta.ativo\n                        }\n                    })\n                }\n            })\n        };\n    });\n    \n    console.dir(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure ' + procedure_name + ' <-----------------')\n    console.dir(JSON.stringify(err))\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n    ","outputs":1,"noerr":0,"x":370,"y":1500,"wires":[["d67db1e1.81a63"]]},{"id":"9b4530df.0a73b","type":"http in","z":"8364cdd3.e51ef","name":"contas","url":"/api/contacorrente/contas","method":"get","swaggerDoc":"","x":110,"y":1500,"wires":[["1395abe2.7dcfd4"]]},{"id":"cf0bcb85.4843a8","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'FN_LANCAMENTOS_A_CONFERIR'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\n// ---------------------- CAMPOS DA TRANSACAO ------------------------------------------\nrequest.input('CONTA', mssql.Int, msg.req.params.conta)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets[0].map( lancamento => {\n        lancamento.liquidado = !!lancamento.liquidado\n        return lancamento\n    });\n    console.dir(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure ' + procedure_name + ' <-----------------');\n    console.dir(JSON.stringify(err));\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n    ","outputs":1,"noerr":0,"x":370,"y":1560,"wires":[["99496216.465b3"]]},{"id":"fa45d337.b920c","type":"http in","z":"8364cdd3.e51ef","name":"a conferir","url":"/api/contacorrente/lancamentos/conferir/:conta","method":"get","swaggerDoc":"","x":120,"y":1560,"wires":[["cf0bcb85.4843a8"]]},{"id":"ea90c3ed.e8e0f","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'FN_BANCOS_LIST'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets[0];\n\n    console.dir(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure ' + procedure_name + ' <-----------------')\n    console.dir(JSON.stringify(err))\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n    ","outputs":1,"noerr":0,"x":370,"y":1460,"wires":[["f67f909e.a6e2d"]]},{"id":"8b97a0a1.0a79b","type":"http in","z":"8364cdd3.e51ef","name":"bancos","url":"/api/contacorrente/bancos","method":"get","swaggerDoc":"","x":110,"y":1460,"wires":[["ea90c3ed.e8e0f"]]},{"id":"31a1d385.b7251c","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'FN_LANCAMENTO_ADD'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\n// ---------------------- CAMPOS DA TRANSACAO ------------------------------------------\n\nrequest.input('ID', mssql.Int, msg.payload.id)\nrequest.input('CONTA', mssql.Int, msg.payload.conta)\nrequest.input('DATA', mssql.DateTime2, msg.payload.data)\nrequest.input('LIQUIDACAO', mssql.DateTime2, msg.payload.liquidacao)\nrequest.input('DOCUMENTO', mssql.VarChar(50), msg.payload.documento)\nrequest.input('DESCRICAO', mssql.VarChar(100), msg.payload.descricao)\nrequest.input('VALOR', mssql.Money, msg.payload.valor)\nrequest.input('OPERACAO', mssql.Char(1), msg.payload.operacao)\nrequest.input('LIQUIDADO', mssql.Bit, msg.payload.liquidado)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets || [{ erro: 9997, mensagem: 'A procedure foi executada mas não retornou resposta para esta solicitação !'}];\n    console.dir(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure ' + procedure_name + ' <-----------------')\n    console.dir(JSON.stringify(err))\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n    ","outputs":1,"noerr":0,"x":370,"y":1700,"wires":[["60d1adb.23a4d54"]]},{"id":"f8e1f31f.cfd55","type":"http in","z":"8364cdd3.e51ef","name":"add","url":"/api/contacorrente/lancamento/add","method":"post","swaggerDoc":"","x":110,"y":1700,"wires":[["31a1d385.b7251c"]]},{"id":"60d1adb.23a4d54","type":"function","z":"8364cdd3.e51ef","name":"NOTIFY","func":"if (Array.isArray(msg.payload) && msg.payload.length > 0) {\n    \n    if (Array.isArray(msg.payload[0]) && msg.payload[0].length > 0 && msg.payload[0][0].erro === 0) {\n        return [\n            null, // mensagens de retorno\n            {payload: msg.payload[1]}, // notificações\n            {req: msg.req, res: msg.res, payload: msg.payload[2] ? msg.payload[2][0] : ''}\n        ];\n    } else {\n        return [\n            {req: msg.req, res: msg.res, payload: msg.payload[0][0]}, // mensagens de retorno\n            null, // notificações\n            null\n        ];\n    }\n    \n} else {\n    return [\n        msg, \n        null, \n        null\n    ];\n}\n","outputs":"3","noerr":0,"x":600,"y":1700,"wires":[["eeb3e70f.025e18","e6a80aaf.b68508"],["e2f0dfb8.e7f78"],["a6fec812.eaf238","e3dd4107.36c21"]]},{"id":"63e5bc5b.509124","type":"mqtt out","z":"8364cdd3.e51ef","name":"","topic":"","qos":"","retain":"","broker":"b71ea51.d75e258","x":1110,"y":1680,"wires":[]},{"id":"5db7fc0f.0868d4","type":"function","z":"8364cdd3.e51ef","name":"tarefa","func":"msg.topic = msg.payload.topico;\n\nreturn msg;","outputs":1,"noerr":0,"x":950,"y":1720,"wires":[["63e5bc5b.509124","b4a2c478.ba0248"]]},{"id":"e2f0dfb8.e7f78","type":"split","z":"8364cdd3.e51ef","name":"","splt":"\\n","x":790,"y":1720,"wires":[["5db7fc0f.0868d4"]]},{"id":"eeb3e70f.025e18","type":"function","z":"8364cdd3.e51ef","name":"erro","func":"if ((msg.payload.erro && msg.payload.erro !== 0) || (msg.payload.number) || (msg.payload.message)) {\n    msg.statusCode = 500;\n\n    msg.payload = msg.payload || {};\n    msg.payload.erro = msg.payload.erro || msg.payload.error || msg.payload.number || 9999;\n    msg.payload.mensagem = msg.payload.mensagem || msg.payload.message || 'Ocorreu um erro interno ao executar a sua solicitação.'\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":790,"y":1680,"wires":[["e5deb63b.470498"]]},{"id":"e5deb63b.470498","type":"http response","z":"8364cdd3.e51ef","name":"","x":950,"y":1680,"wires":[]},{"id":"b4a2c478.ba0248","type":"debug","z":"8364cdd3.e51ef","name":"","active":true,"console":"false","complete":"payload","x":1130,"y":1760,"wires":[]},{"id":"e6a80aaf.b68508","type":"debug","z":"8364cdd3.e51ef","name":"","active":true,"console":"false","complete":"payload","x":810,"y":1640,"wires":[]},{"id":"f67f909e.a6e2d","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":1460,"wires":[]},{"id":"d67db1e1.81a63","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":1500,"wires":[]},{"id":"99496216.465b3","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":1560,"wires":[]},{"id":"a6fec812.eaf238","type":"http response","z":"8364cdd3.e51ef","name":"","x":790,"y":1760,"wires":[]},{"id":"e3dd4107.36c21","type":"debug","z":"8364cdd3.e51ef","name":"","active":true,"console":"false","complete":"payload","x":810,"y":1800,"wires":[]},{"id":"9eb54b77.4e38f8","type":"http in","z":"8364cdd3.e51ef","name":"liquidar","url":"/api/contacorrente/lancamento/liquidar","method":"put","swaggerDoc":"","x":110,"y":1660,"wires":[["de611436.dea888"]]},{"id":"de611436.dea888","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'FN_LANCAMENTO_LIQUIDAR'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\n// ---------------------- CAMPOS DA TRANSACAO ------------------------------------------\n\nrequest.input('ID', mssql.Int, msg.payload.id)\nrequest.input('LIQUIDADO', mssql.Bit, msg.payload.liquidado)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets || [{ erro: 9997, mensagem: 'A procedure foi executada mas não retornou resposta para esta solicitação !'}];\n    console.dir(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure ' + procedure_name + ' <-----------------')\n    console.dir(JSON.stringify(err))\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n    ","outputs":1,"noerr":0,"x":370,"y":1660,"wires":[["60d1adb.23a4d54"]]},{"id":"c21e605.6cec9a","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'FN_LANCAMENTOS_LIQUIDADOS'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\n// ---------------------- CAMPOS DA TRANSACAO ------------------------------------------\nrequest.input('CONTA', mssql.Int, msg.req.params.conta)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets[0].map( lancamento => {\n        lancamento.liquidado = !!lancamento.liquidado\n        return lancamento\n    });\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure ' + procedure_name + ' <-----------------');\n    console.dir(JSON.stringify(err));\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n    ","outputs":1,"noerr":0,"x":370,"y":1600,"wires":[["5810b127.a7291"]]},{"id":"fe1ca172.2d574","type":"http in","z":"8364cdd3.e51ef","name":"liquidados","url":"/api/contacorrente/lancamentos/liquidados/:conta","method":"get","swaggerDoc":"","x":120,"y":1600,"wires":[["c21e605.6cec9a"]]},{"id":"5810b127.a7291","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":1600,"wires":[]},{"id":"1cd9fb42.8ac805","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var sql = `\n    DECLARE @PERFIL NVARCHAR(50)\n    \n    SET @PERFIL = '${msg.req.query.perfil}'\n    \n    SELECT *\n    FROM\n    \tUSR_LNK\n    WHERE\n       perfil IN (@PERFIL)\n    ORDER BY\n       padrao DESC \n`\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    msg.payload = recordset;\n    console.dir(recordset);\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});","outputs":1,"noerr":0,"x":990,"y":220,"wires":[["931aae3d.fc7cf"]]},{"id":"8f0c25a9.22d3d8","type":"http in","z":"8364cdd3.e51ef","name":"consultas","url":"/api/consultas/","method":"get","swaggerDoc":"","x":820,"y":220,"wires":[["1cd9fb42.8ac805"]]},{"id":"931aae3d.fc7cf","type":"http response","z":"8364cdd3.e51ef","name":"","x":1150,"y":220,"wires":[]},{"id":"caec0829.6c26f8","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'CONSULTA_LANCAMENTOS'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets[0].map( recebivel => {\n        \n        recebivel.pedido = recordsets[1].find( pedido => pedido.nosso_numero === recebivel.nosso_numero)\n        \n        recebivel.parcelas = recordsets[2].filter( parcela => parcela.nosso_numero === recebivel.nosso_numero)\n        \n        return recebivel\n    });\n    console.dir(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure ' + procedure_name + ' <-----------------');\n    console.dir(JSON.stringify(err));\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n    ","outputs":1,"noerr":0,"x":990,"y":280,"wires":[["40352414.1abb3c"]]},{"id":"18d9fe27.5a80d2","type":"http in","z":"8364cdd3.e51ef","name":"lancamento","url":"/api/consulta/lancamento","method":"get","swaggerDoc":"","x":830,"y":280,"wires":[["caec0829.6c26f8"]]},{"id":"40352414.1abb3c","type":"http response","z":"8364cdd3.e51ef","name":"","x":1150,"y":280,"wires":[]},{"id":"95e6792b.315f38","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var sql = `\n    DECLARE @PERFIL NVARCHAR(50)\n    \n    SET @PERFIL = '${msg.req.query.perfil}'\n    \n    SELECT *\n    FROM\n    \tUSR_LNK\n    WHERE\n       perfil IN (@PERFIL)\n    ORDER BY\n       padrao DESC \n`\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    msg.payload = recordset;\n    console.dir(recordset);\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});","outputs":1,"noerr":0,"x":990,"y":320,"wires":[["fad3902a.56d89"]]},{"id":"9b56f3b9.6ee24","type":"http in","z":"8364cdd3.e51ef","name":"cobranca","url":"/api/consulta/cobranca","method":"get","swaggerDoc":"","x":820,"y":320,"wires":[["95e6792b.315f38"]]},{"id":"fad3902a.56d89","type":"http response","z":"8364cdd3.e51ef","name":"","x":1150,"y":320,"wires":[]},{"id":"14376e9f.cab2f1","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var sql = `\n    DECLARE @PERFIL NVARCHAR(50)\n    \n    SET @PERFIL = '${msg.req.query.perfil}'\n    \n    SELECT *\n    FROM\n    \tUSR_LNK\n    WHERE\n       perfil IN (@PERFIL)\n    ORDER BY\n       padrao DESC \n`\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    msg.payload = recordset;\n    console.dir(recordset);\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});","outputs":1,"noerr":0,"x":990,"y":360,"wires":[["4ae8edf7.8c7ad4"]]},{"id":"59f8b075.0453a","type":"http in","z":"8364cdd3.e51ef","name":"remessa","url":"/api/consulta/remessa","method":"get","swaggerDoc":"","x":820,"y":360,"wires":[["14376e9f.cab2f1"]]},{"id":"4ae8edf7.8c7ad4","type":"http response","z":"8364cdd3.e51ef","name":"","x":1150,"y":360,"wires":[]},{"id":"a6d0e1af.c8917","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var sql = `\n    DECLARE @PERFIL NVARCHAR(50)\n    \n    SET @PERFIL = '${msg.req.query.perfil}'\n    \n    SELECT *\n    FROM\n    \tUSR_LNK\n    WHERE\n       perfil IN (@PERFIL)\n    ORDER BY\n       padrao DESC \n`\n\nvar mssql = global.get('mssql');\n\nvar request = new mssql.Request(global.get('FINANCEIRO')).query(sql).then(function(recordset) {\n    msg.payload = recordset;\n    console.dir(recordset);\n    node.send(msg);\n})\n.catch(function(err) {\n    msg.payload = err;\n    node.error(msg);\n});","outputs":1,"noerr":0,"x":990,"y":400,"wires":[["f9df1bf9.7acf98"]]},{"id":"a015f97e.e2d1f8","type":"http in","z":"8364cdd3.e51ef","name":"retorno","url":"/api/consulta/retorno","method":"get","swaggerDoc":"","x":810,"y":400,"wires":[["a6d0e1af.c8917"]]},{"id":"f9df1bf9.7acf98","type":"http response","z":"8364cdd3.e51ef","name":"","x":1150,"y":400,"wires":[]},{"id":"2cc453d.432b1ac","type":"http in","z":"8364cdd3.e51ef","name":"excluir","url":"/api/contacorrente/lancamento/excluir/:id","method":"delete","swaggerDoc":"","x":110,"y":1780,"wires":[["1ce1760.046568a"]]},{"id":"1ce1760.046568a","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'FN_LANCAMENTO_REMOVE'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\n// ---------------------- CAMPOS DA TRANSACAO ------------------------------------------\n\nrequest.input('ID', mssql.Int, msg.req.params.id)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets || [{ erro: 9997, mensagem: 'A procedure foi executada mas não retornou resposta para esta solicitação !'}];\n    console.dir(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure ' + procedure_name + ' <-----------------')\n    console.dir(JSON.stringify(err))\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n    ","outputs":1,"noerr":0,"x":370,"y":1780,"wires":[["60d1adb.23a4d54"]]},{"id":"ffd5c98e.d63928","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'FN_LANCAMENTO_EDIT'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\n// ---------------------- CAMPOS DA TRANSACAO ------------------------------------------\n\nrequest.input('ID', mssql.Int, msg.payload.id)\nrequest.input('CONTA', mssql.Int, msg.payload.conta)\nrequest.input('DATA', mssql.DateTime2, msg.payload.data)\nrequest.input('LIQUIDACAO', mssql.DateTime2, msg.payload.liquidacao)\nrequest.input('DOCUMENTO', mssql.VarChar(50), msg.payload.documento)\nrequest.input('DESCRICAO', mssql.VarChar(100), msg.payload.descricao)\nrequest.input('VALOR', mssql.Money, msg.payload.valor)\nrequest.input('OPERACAO', mssql.Char(1), msg.payload.operacao)\nrequest.input('LIQUIDADO', mssql.Bit, msg.payload.liquidado)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n\n    msg.payload = Array.isArray(recordsets) && recordsets || [{ erro: 9997, mensagem: 'A procedure foi executada mas não retornou resposta para esta solicitação !'}];\n    console.dir(msg.payload);\n    node.send(msg);\n\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure ' + procedure_name + ' <-----------------')\n    console.dir(JSON.stringify(err))\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n    ","outputs":1,"noerr":0,"x":370,"y":1740,"wires":[["60d1adb.23a4d54"]]},{"id":"ef9a523f.3d9cd","type":"http in","z":"8364cdd3.e51ef","name":"edit","url":"/api/contacorrente/lancamento/edit","method":"put","swaggerDoc":"","x":110,"y":1740,"wires":[["ffd5c98e.d63928"]]},{"id":"7adcc684.3c9d48","type":"inject","z":"8364cdd3.e51ef","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":120,"y":2020,"wires":[["7977456f.36307c"]]},{"id":"7977456f.36307c","type":"function","z":"8364cdd3.e51ef","name":"filename","func":"function right(str, n){\n    if (n <= 0)\n       return \"\";\n    else if (n > String(str).length)\n       return str;\n    else {\n       var iLen = String(str).length;\n       return String(str).substring(iLen, iLen - n);\n    }\n}\n\nlet remessa = parseInt(global.get('remessa') || 0, 10)\nglobal.set(\"remessa\", remessa + 1);\n\nlet hoje = new Date();\nlet dia = right('00' + hoje.getDate().toString(), 2);\nlet mes = right('00' + (hoje.getMonth() + 1).toString(), 2);\nlet seq = right('00' + remessa.toString(), 2);\n\nmsg.filename = 'CB' + dia + mes + seq + '.TST'\n\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":2020,"wires":[["3ecd23ce.d8261c","66fede95.13f6d"]]},{"id":"3ecd23ce.d8261c","type":"debug","z":"8364cdd3.e51ef","name":"","active":true,"console":"false","complete":"filename","x":930,"y":2020,"wires":[]},{"id":"d502eeea.9b956","type":"comment","z":"8364cdd3.e51ef","name":"CNAB BRADESCO - REMESSA","info":"","x":170,"y":1960,"wires":[]},{"id":"66fede95.13f6d","type":"function","z":"8364cdd3.e51ef","name":"HEADER","func":"msg.payload = []\n\nlet header = Array.apply(' ', Array(400))\n\nmsg.payload.push(header);\n\nreturn msg;","outputs":1,"noerr":0,"x":620,"y":2120,"wires":[["83aa40c0.d9fec"]]},{"id":"83aa40c0.d9fec","type":"debug","z":"8364cdd3.e51ef","name":"","active":true,"console":"false","complete":"payload","x":930,"y":2120,"wires":[]},{"id":"3004e45c.a2719c","type":"http in","z":"8364cdd3.e51ef","name":"senha","url":"/api/usuario/password","method":"post","swaggerDoc":"","x":110,"y":280,"wires":[["9ebb389f.116208"]]},{"id":"5dab6a09.30d234","type":"http response","z":"8364cdd3.e51ef","name":"","x":590,"y":280,"wires":[]},{"id":"9ebb389f.116208","type":"function","z":"8364cdd3.e51ef","name":"SQL","func":"var mssql = global.get('mssql');\n\nvar procedure_name = 'USUARIO_TROCA_SENHA'\n\nvar request = new mssql.Request(global.get('FINANCEIRO'));\n\n// ---------------------- CAMPOS DA TRANSACAO ------------------------------------------\n\nrequest.input('USUARIO', mssql.VarChar(20), msg.payload.usuario)\nrequest.input('SENHA_ATUAL', mssql.VarChar(32), msg.payload.senha)\nrequest.input('SENHA_NOVA', mssql.VarChar(32), msg.payload.nova)\n\nrequest.execute(procedure_name).then(function(recordsets, returnValue, affected) {\n\n    console.dir('Recordsets: ' + recordsets.length); // count of recordsets returned by the procedure\n    console.dir('Record count in first recordset: ' + recordsets[0].length); // count of rows contained in first recordset\n    console.dir('Return value: ' + returnValue); // procedure return value\n    console.dir('Recordsets return value: ' + recordsets.returnValue); // same as previous line\n    console.dir('Rows affected: ' + affected); // number of rows affected by the statemens\n    console.dir('Recordset rows affected: ' + recordsets.rowsAffected); // same as previous line\n\n    //console.log(request.parameters.output_parameter.value); // output value\n    \n    if (Array.isArray(recordsets) && recordsets[0][0].erro !== 0) {\n        msg.statusCode = 500;\n    \n        msg.payload = recordsets[0][0] || {};\n        msg.payload.erro = msg.payload.erro || msg.payload.error || msg.payload.number || 9999;\n        msg.payload.mensagem = msg.payload.mensagem || msg.payload.message || 'Ocorreu um erro interno ao executar a sua solicitação.'\n    } else {\n        msg.payload = (Array.isArray(recordsets) && recordsets.length > 1 && recordsets[1][0]) || {}\n    }\n\n    node.send(msg);\n})\n.catch(function(err) {\n    console.dir('-----------------> Erro ao chamar Stored Procedure ' + procedure_name + ' <-----------------')\n    console.dir(JSON.stringify(err))\n    msg.payload = err || { erro: 9999, mensagem: 'Erro desconhecido.'};\n    node.send(msg);\n});\n    ","outputs":1,"noerr":0,"x":370,"y":280,"wires":[["5dab6a09.30d234"]]},{"id":"4ce9f9fa.853ad8","type":"comment","z":"8364cdd3.e51ef","name":"CONCILIAÇÃO EXTRATO BANCARIO","info":"","x":210,"y":1400,"wires":[]},{"id":"b71ea51.d75e258","type":"mqtt-broker","z":"","broker":"192.168.0.1","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""}]